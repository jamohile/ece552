Created by PLY version 3.2 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> decls
Rule 2     empty -> <empty>
Rule 3     decls -> declsx
Rule 4     declsx -> decl declsx
Rule 5     declsx -> empty
Rule 6     decl -> PROTOCOL STRING SEMI
Rule 7     decl -> INCLUDE STRING SEMI
Rule 8     decl -> MACHINE ( ident pairs ) : params { decls }
Rule 9     decl -> ACTION ( ident pairs ) statements
Rule 10    decl -> IN_PORT ( ident , type , var pairs ) statements
Rule 11    decl -> OUT_PORT ( ident , type , var pairs ) SEMI
Rule 12    decl -> TRANS ( idents , idents , ident pairs ) idents
Rule 13    decl -> TRANS ( idents , idents pairs ) idents
Rule 14    decl -> EXTERN_TYPE ( type pairs ) SEMI
Rule 15    decl -> GLOBAL ( type pairs ) { type_members }
Rule 16    decl -> STRUCT ( type pairs ) { type_members }
Rule 17    decl -> ENUM ( type pairs ) { type_enums }
Rule 18    decl -> STATE_DECL ( type pairs ) { type_states }
Rule 19    decl -> type ident pairs SEMI
Rule 20    decl -> void ident ( params ) pairs SEMI
Rule 21    decl -> type ident ( params ) pairs SEMI
Rule 22    decl -> void ident ( params ) pairs statements
Rule 23    decl -> type ident ( params ) pairs statements
Rule 24    type_members -> type_member type_members
Rule 25    type_members -> empty
Rule 26    type_member -> type_or_void ident ( types ) pairs SEMI
Rule 27    type_member -> type_or_void ident pairs SEMI
Rule 28    type_member -> type_or_void ident ASSIGN expr SEMI
Rule 29    type_enums -> type_enum type_enums
Rule 30    type_enums -> empty
Rule 31    type_enum -> ident pairs SEMI
Rule 32    type_states -> type_state type_states
Rule 33    type_states -> empty
Rule 34    type_state -> ident , enumeration pairs SEMI
Rule 35    types -> type , types
Rule 36    types -> type
Rule 37    types -> empty
Rule 38    typestr -> typestr DOUBLE_COLON ident
Rule 39    typestr -> ident
Rule 40    type -> typestr
Rule 41    void -> VOID
Rule 42    type_or_void -> type
Rule 43    type_or_void -> void
Rule 44    params -> param , params
Rule 45    params -> param
Rule 46    params -> empty
Rule 47    param -> type ident
Rule 48    param -> type STAR ident
Rule 49    param -> type STAR ident = STRING
Rule 50    param -> type ident = NUMBER
Rule 51    param -> type ident = LIT_BOOL
Rule 52    param -> type ident = STRING
Rule 53    idents -> { identx }
Rule 54    idents -> ident
Rule 55    identx -> ident SEMI identx
Rule 56    identx -> ident , identx
Rule 57    identx -> ident identx
Rule 58    identx -> empty
Rule 59    ident -> IDENT
Rule 60    pairs -> , pairsx
Rule 61    pairs -> empty
Rule 62    pairsx -> pair , pairsx
Rule 63    pairsx -> pair
Rule 64    pair -> ident = STRING
Rule 65    pair -> ident = ident
Rule 66    pair -> ident = NUMBER
Rule 67    pair -> STRING
Rule 68    statements -> { statements_inner }
Rule 69    statements -> { }
Rule 70    statements_inner -> statement statements_inner
Rule 71    statements_inner -> statement
Rule 72    exprs -> expr , exprs
Rule 73    exprs -> expr
Rule 74    exprs -> empty
Rule 75    statement -> expr SEMI
Rule 76    statement -> expr ASSIGN expr SEMI
Rule 77    statement -> ENQUEUE ( var , type pairs ) statements
Rule 78    statement -> STALL_AND_WAIT ( var , var ) SEMI
Rule 79    statement -> PEEK ( var , type pairs ) statements
Rule 80    statement -> COPY_HEAD ( var , var pairs ) SEMI
Rule 81    statement -> CHECK_ALLOCATE ( var ) SEMI
Rule 82    statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
Rule 83    aexpr -> STATIC_CAST ( type , expr )
Rule 84    aexpr -> STATIC_CAST ( type , STRING , expr )
Rule 85    statement -> RETURN expr SEMI
Rule 86    statement -> if_statement
Rule 87    if_statement -> IF ( expr ) statements
Rule 88    if_statement -> IF ( expr ) statements ELSE statements
Rule 89    if_statement -> IF ( expr ) statements ELSE if_statement
Rule 90    aexpr -> var
Rule 91    aexpr -> type ident
Rule 92    aexpr -> literal
Rule 93    aexpr -> enumeration
Rule 94    aexpr -> ident ( exprs )
Rule 95    aexpr -> NEW type
Rule 96    aexpr -> OOD
Rule 97    aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs )
Rule 98    aexpr -> THIS DOT var [ expr ] DOT var DOT field
Rule 99    aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
Rule 100   aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field
Rule 101   aexpr -> aexpr DOT ident
Rule 102   aexpr -> aexpr DOT ident ( exprs )
Rule 103   aexpr -> aexpr [ exprs ]
Rule 104   aexpr -> type DOUBLE_COLON ident ( exprs )
Rule 105   expr -> aexpr
Rule 106   expr -> expr STAR expr
Rule 107   expr -> expr SLASH expr
Rule 108   expr -> expr PLUS expr
Rule 109   expr -> expr DASH expr
Rule 110   expr -> expr LT expr
Rule 111   expr -> expr GT expr
Rule 112   expr -> expr LE expr
Rule 113   expr -> expr GE expr
Rule 114   expr -> expr EQ expr
Rule 115   expr -> expr NE expr
Rule 116   expr -> expr AND expr
Rule 117   expr -> expr OR expr
Rule 118   expr -> expr RIGHTSHIFT expr
Rule 119   expr -> expr LEFTSHIFT expr
Rule 120   expr -> NOT expr
Rule 121   expr -> DASH expr
Rule 122   aexpr -> ( expr )
Rule 123   aexpr -> IS_VALID ( var )
Rule 124   aexpr -> IS_INVALID ( var )
Rule 125   literal -> STRING
Rule 126   literal -> NUMBER
Rule 127   literal -> FLOATNUMBER
Rule 128   literal -> LIT_BOOL
Rule 129   enumeration -> ident : ident
Rule 130   var -> ident
Rule 131   field -> ident

Terminals, with rules where they appear

(                    : 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 26 77 78 79 80 81 82 83 84 87 88 89 94 97 99 102 104 122 123 124
)                    : 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 26 77 78 79 80 81 82 83 84 87 88 89 94 97 99 102 104 122 123 124
,                    : 10 10 11 11 12 12 13 34 35 44 56 60 62 72 77 78 79 80 82 82 83 84 84
:                    : 8 129
=                    : 49 50 51 52 64 65 66
ACTION               : 9
AND                  : 116
ASSIGN               : 28 76
CHECK_ALLOCATE       : 81
CHECK_STOP_SLOTS     : 82
CHIP                 : 99 100
COPY_HEAD            : 80
DASH                 : 109 121
DOT                  : 97 97 97 98 98 98 99 99 99 100 100 100 101 102
DOUBLE_COLON         : 38 104
ELSE                 : 88 89
ENQUEUE              : 77
ENUM                 : 17
EQ                   : 114
EXTERN_TYPE          : 14
FLOATNUMBER          : 127
GE                   : 113
GLOBAL               : 15
GT                   : 111
IDENT                : 59
IF                   : 87 88 89
INCLUDE              : 7
IN_PORT              : 10
IS_INVALID           : 124
IS_VALID             : 123
LE                   : 112
LEFTSHIFT            : 119
LIT_BOOL             : 51 128
LT                   : 110
MACHINE              : 8
NE                   : 115
NEW                  : 95
NOT                  : 120
NUMBER               : 50 66 126
OOD                  : 96
OR                   : 117
OUT_PORT             : 11
PEEK                 : 79
PLUS                 : 108
PROTOCOL             : 6
RETURN               : 85
RIGHTSHIFT           : 118
SEMI                 : 6 7 11 14 19 20 21 26 27 28 31 34 55 75 76 78 80 81 82 85
SLASH                : 107
STALL_AND_WAIT       : 78
STAR                 : 48 49 106
STATE_DECL           : 18
STATIC_CAST          : 83 84
STRING               : 6 7 49 52 64 67 82 82 84 125
STRUCT               : 16
THIS                 : 97 98
TRANS                : 12 13
VOID                 : 41
[                    : 97 98 99 99 100 100 103
]                    : 97 98 99 99 100 100 103
error                : 
{                    : 8 15 16 17 18 53 68 69
}                    : 8 15 16 17 18 53 68 69

Nonterminals, with rules where they appear

aexpr                : 101 102 103 105
decl                 : 4
decls                : 1 8
declsx               : 3 4
empty                : 5 25 30 33 37 46 58 61 74
enumeration          : 34 93
expr                 : 28 72 73 75 76 76 83 84 85 87 88 89 97 98 99 99 100 100 106 106 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 121 122
exprs                : 72 94 97 99 102 103 104
field                : 98 100
file                 : 0
ident                : 8 9 10 11 12 19 20 21 22 23 26 27 28 31 34 38 39 47 48 49 50 51 52 54 55 56 57 64 65 65 66 91 94 97 99 101 102 104 129 129 130 131
idents               : 12 12 12 13 13 13
identx               : 53 55 56 57
if_statement         : 86 89
literal              : 92
pair                 : 62 63
pairs                : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 26 27 31 34 77 79 80
pairsx               : 60 62
param                : 44 45
params               : 8 20 21 22 23 44
statement            : 70 71
statements           : 9 10 22 23 77 79 87 88 88 89
statements_inner     : 68 70
type                 : 10 11 14 15 16 17 18 19 21 23 35 36 42 47 48 49 50 51 52 77 79 83 84 91 95 104
type_enum            : 29
type_enums           : 17 29
type_member          : 24
type_members         : 15 16 24
type_or_void         : 26 27 28
type_state           : 32
type_states          : 18 32
types                : 26 35
typestr              : 38 40
var                  : 10 11 77 78 78 79 80 80 81 82 90 97 97 98 98 99 99 100 100 123 124
void                 : 20 22 43

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . decls
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (15) decl -> . GLOBAL ( type pairs ) { type_members }
    (16) decl -> . STRUCT ( type pairs ) { type_members }
    (17) decl -> . ENUM ( type pairs ) { type_enums }
    (18) decl -> . STATE_DECL ( type pairs ) { type_states }
    (19) decl -> . type ident pairs SEMI
    (20) decl -> . void ident ( params ) pairs SEMI
    (21) decl -> . type ident ( params ) pairs SEMI
    (22) decl -> . void ident ( params ) pairs statements
    (23) decl -> . type ident ( params ) pairs statements
    (2) empty -> .
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    PROTOCOL        shift and go to state 12
    INCLUDE         shift and go to state 18
    MACHINE         shift and go to state 15
    ACTION          shift and go to state 8
    IN_PORT         shift and go to state 23
    OUT_PORT        shift and go to state 7
    TRANS           shift and go to state 6
    EXTERN_TYPE     shift and go to state 16
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 20
    ENUM            shift and go to state 14
    STATE_DECL      shift and go to state 21
    $end            reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 19
    void                           shift and go to state 13
    declsx                         shift and go to state 11
    file                           shift and go to state 5
    decls                          shift and go to state 22
    type                           shift and go to state 9
    typestr                        shift and go to state 17
    empty                          shift and go to state 10

state 1

    (4) declsx -> decl . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (15) decl -> . GLOBAL ( type pairs ) { type_members }
    (16) decl -> . STRUCT ( type pairs ) { type_members }
    (17) decl -> . ENUM ( type pairs ) { type_enums }
    (18) decl -> . STATE_DECL ( type pairs ) { type_states }
    (19) decl -> . type ident pairs SEMI
    (20) decl -> . void ident ( params ) pairs SEMI
    (21) decl -> . type ident ( params ) pairs SEMI
    (22) decl -> . void ident ( params ) pairs statements
    (23) decl -> . type ident ( params ) pairs statements
    (2) empty -> .
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    PROTOCOL        shift and go to state 12
    INCLUDE         shift and go to state 18
    MACHINE         shift and go to state 15
    ACTION          shift and go to state 8
    IN_PORT         shift and go to state 23
    OUT_PORT        shift and go to state 7
    TRANS           shift and go to state 6
    EXTERN_TYPE     shift and go to state 16
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 20
    ENUM            shift and go to state 14
    STATE_DECL      shift and go to state 21
    $end            reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 19
    void                           shift and go to state 13
    declsx                         shift and go to state 24
    type                           shift and go to state 9
    typestr                        shift and go to state 17
    empty                          shift and go to state 10

state 2

    (41) void -> VOID .

    IDENT           reduce using rule 41 (void -> VOID .)


state 3

    (15) decl -> GLOBAL . ( type pairs ) { type_members }

    (               shift and go to state 25


state 4

    (59) ident -> IDENT .

    SEMI            reduce using rule 59 (ident -> IDENT .)
    ,               reduce using rule 59 (ident -> IDENT .)
    IDENT           reduce using rule 59 (ident -> IDENT .)
    }               reduce using rule 59 (ident -> IDENT .)
    (               reduce using rule 59 (ident -> IDENT .)
    :               reduce using rule 59 (ident -> IDENT .)
    DOT             reduce using rule 59 (ident -> IDENT .)
    [               reduce using rule 59 (ident -> IDENT .)
    STAR            reduce using rule 59 (ident -> IDENT .)
    SLASH           reduce using rule 59 (ident -> IDENT .)
    PLUS            reduce using rule 59 (ident -> IDENT .)
    DASH            reduce using rule 59 (ident -> IDENT .)
    LT              reduce using rule 59 (ident -> IDENT .)
    GT              reduce using rule 59 (ident -> IDENT .)
    LE              reduce using rule 59 (ident -> IDENT .)
    GE              reduce using rule 59 (ident -> IDENT .)
    EQ              reduce using rule 59 (ident -> IDENT .)
    NE              reduce using rule 59 (ident -> IDENT .)
    AND             reduce using rule 59 (ident -> IDENT .)
    OR              reduce using rule 59 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 59 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 59 (ident -> IDENT .)
    ]               reduce using rule 59 (ident -> IDENT .)
    DOUBLE_COLON    reduce using rule 59 (ident -> IDENT .)
    ASSIGN          reduce using rule 59 (ident -> IDENT .)
    )               reduce using rule 59 (ident -> IDENT .)
    =               reduce using rule 59 (ident -> IDENT .)
    {               reduce using rule 59 (ident -> IDENT .)
    PROTOCOL        reduce using rule 59 (ident -> IDENT .)
    INCLUDE         reduce using rule 59 (ident -> IDENT .)
    MACHINE         reduce using rule 59 (ident -> IDENT .)
    ACTION          reduce using rule 59 (ident -> IDENT .)
    IN_PORT         reduce using rule 59 (ident -> IDENT .)
    OUT_PORT        reduce using rule 59 (ident -> IDENT .)
    TRANS           reduce using rule 59 (ident -> IDENT .)
    EXTERN_TYPE     reduce using rule 59 (ident -> IDENT .)
    GLOBAL          reduce using rule 59 (ident -> IDENT .)
    STRUCT          reduce using rule 59 (ident -> IDENT .)
    ENUM            reduce using rule 59 (ident -> IDENT .)
    STATE_DECL      reduce using rule 59 (ident -> IDENT .)
    VOID            reduce using rule 59 (ident -> IDENT .)
    $end            reduce using rule 59 (ident -> IDENT .)


state 5

    (0) S' -> file .



state 6

    (12) decl -> TRANS . ( idents , idents , ident pairs ) idents
    (13) decl -> TRANS . ( idents , idents pairs ) idents

    (               shift and go to state 26


state 7

    (11) decl -> OUT_PORT . ( ident , type , var pairs ) SEMI

    (               shift and go to state 27


state 8

    (9) decl -> ACTION . ( ident pairs ) statements

    (               shift and go to state 28


state 9

    (19) decl -> type . ident pairs SEMI
    (21) decl -> type . ident ( params ) pairs SEMI
    (23) decl -> type . ident ( params ) pairs statements
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 29

state 10

    (5) declsx -> empty .

    }               reduce using rule 5 (declsx -> empty .)
    $end            reduce using rule 5 (declsx -> empty .)


state 11

    (3) decls -> declsx .

    }               reduce using rule 3 (decls -> declsx .)
    $end            reduce using rule 3 (decls -> declsx .)


state 12

    (6) decl -> PROTOCOL . STRING SEMI

    STRING          shift and go to state 30


state 13

    (20) decl -> void . ident ( params ) pairs SEMI
    (22) decl -> void . ident ( params ) pairs statements
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 31

state 14

    (17) decl -> ENUM . ( type pairs ) { type_enums }

    (               shift and go to state 32


state 15

    (8) decl -> MACHINE . ( ident pairs ) : params { decls }

    (               shift and go to state 33


state 16

    (14) decl -> EXTERN_TYPE . ( type pairs ) SEMI

    (               shift and go to state 34


state 17

    (40) type -> typestr .
    (38) typestr -> typestr . DOUBLE_COLON ident

  ! shift/reduce conflict for DOUBLE_COLON resolved as shift
    IDENT           reduce using rule 40 (type -> typestr .)
    ,               reduce using rule 40 (type -> typestr .)
    )               reduce using rule 40 (type -> typestr .)
    STAR            reduce using rule 40 (type -> typestr .)
    DOT             reduce using rule 40 (type -> typestr .)
    [               reduce using rule 40 (type -> typestr .)
    SEMI            reduce using rule 40 (type -> typestr .)
    ASSIGN          reduce using rule 40 (type -> typestr .)
    SLASH           reduce using rule 40 (type -> typestr .)
    PLUS            reduce using rule 40 (type -> typestr .)
    DASH            reduce using rule 40 (type -> typestr .)
    LT              reduce using rule 40 (type -> typestr .)
    GT              reduce using rule 40 (type -> typestr .)
    LE              reduce using rule 40 (type -> typestr .)
    GE              reduce using rule 40 (type -> typestr .)
    EQ              reduce using rule 40 (type -> typestr .)
    NE              reduce using rule 40 (type -> typestr .)
    AND             reduce using rule 40 (type -> typestr .)
    OR              reduce using rule 40 (type -> typestr .)
    RIGHTSHIFT      reduce using rule 40 (type -> typestr .)
    LEFTSHIFT       reduce using rule 40 (type -> typestr .)
    ]               reduce using rule 40 (type -> typestr .)
    DOUBLE_COLON    shift and go to state 35

  ! DOUBLE_COLON    [ reduce using rule 40 (type -> typestr .) ]


state 18

    (7) decl -> INCLUDE . STRING SEMI

    STRING          shift and go to state 36


state 19

    (39) typestr -> ident .

    DOUBLE_COLON    reduce using rule 39 (typestr -> ident .)
    ,               reduce using rule 39 (typestr -> ident .)
    IDENT           reduce using rule 39 (typestr -> ident .)
    STAR            reduce using rule 39 (typestr -> ident .)
    )               reduce using rule 39 (typestr -> ident .)
    DOT             reduce using rule 39 (typestr -> ident .)
    [               reduce using rule 39 (typestr -> ident .)
    SEMI            reduce using rule 39 (typestr -> ident .)
    ASSIGN          reduce using rule 39 (typestr -> ident .)
    SLASH           reduce using rule 39 (typestr -> ident .)
    PLUS            reduce using rule 39 (typestr -> ident .)
    DASH            reduce using rule 39 (typestr -> ident .)
    LT              reduce using rule 39 (typestr -> ident .)
    GT              reduce using rule 39 (typestr -> ident .)
    LE              reduce using rule 39 (typestr -> ident .)
    GE              reduce using rule 39 (typestr -> ident .)
    EQ              reduce using rule 39 (typestr -> ident .)
    NE              reduce using rule 39 (typestr -> ident .)
    AND             reduce using rule 39 (typestr -> ident .)
    OR              reduce using rule 39 (typestr -> ident .)
    RIGHTSHIFT      reduce using rule 39 (typestr -> ident .)
    LEFTSHIFT       reduce using rule 39 (typestr -> ident .)
    ]               reduce using rule 39 (typestr -> ident .)


state 20

    (16) decl -> STRUCT . ( type pairs ) { type_members }

    (               shift and go to state 37


state 21

    (18) decl -> STATE_DECL . ( type pairs ) { type_states }

    (               shift and go to state 38


state 22

    (1) file -> decls .

    $end            reduce using rule 1 (file -> decls .)


state 23

    (10) decl -> IN_PORT . ( ident , type , var pairs ) statements

    (               shift and go to state 39


state 24

    (4) declsx -> decl declsx .

    }               reduce using rule 4 (declsx -> decl declsx .)
    $end            reduce using rule 4 (declsx -> decl declsx .)


state 25

    (15) decl -> GLOBAL ( . type pairs ) { type_members }
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 40
    typestr                        shift and go to state 17

state 26

    (12) decl -> TRANS ( . idents , idents , ident pairs ) idents
    (13) decl -> TRANS ( . idents , idents pairs ) idents
    (53) idents -> . { identx }
    (54) idents -> . ident
    (59) ident -> . IDENT

    {               shift and go to state 43
    IDENT           shift and go to state 4

    ident                          shift and go to state 41
    idents                         shift and go to state 42

state 27

    (11) decl -> OUT_PORT ( . ident , type , var pairs ) SEMI
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 44

state 28

    (9) decl -> ACTION ( . ident pairs ) statements
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 45

state 29

    (19) decl -> type ident . pairs SEMI
    (21) decl -> type ident . ( params ) pairs SEMI
    (23) decl -> type ident . ( params ) pairs statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 47
    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 46
    empty                          shift and go to state 49

state 30

    (6) decl -> PROTOCOL STRING . SEMI

    SEMI            shift and go to state 50


state 31

    (20) decl -> void ident . ( params ) pairs SEMI
    (22) decl -> void ident . ( params ) pairs statements

    (               shift and go to state 51


state 32

    (17) decl -> ENUM ( . type pairs ) { type_enums }
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 52
    typestr                        shift and go to state 17

state 33

    (8) decl -> MACHINE ( . ident pairs ) : params { decls }
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 53

state 34

    (14) decl -> EXTERN_TYPE ( . type pairs ) SEMI
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 54
    typestr                        shift and go to state 17

state 35

    (38) typestr -> typestr DOUBLE_COLON . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 55

state 36

    (7) decl -> INCLUDE STRING . SEMI

    SEMI            shift and go to state 56


state 37

    (16) decl -> STRUCT ( . type pairs ) { type_members }
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 57
    typestr                        shift and go to state 17

state 38

    (18) decl -> STATE_DECL ( . type pairs ) { type_states }
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 58
    typestr                        shift and go to state 17

state 39

    (10) decl -> IN_PORT ( . ident , type , var pairs ) statements
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 59

state 40

    (15) decl -> GLOBAL ( type . pairs ) { type_members }
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 60
    empty                          shift and go to state 49

state 41

    (54) idents -> ident .

    ,               reduce using rule 54 (idents -> ident .)
    )               reduce using rule 54 (idents -> ident .)
    PROTOCOL        reduce using rule 54 (idents -> ident .)
    INCLUDE         reduce using rule 54 (idents -> ident .)
    MACHINE         reduce using rule 54 (idents -> ident .)
    ACTION          reduce using rule 54 (idents -> ident .)
    IN_PORT         reduce using rule 54 (idents -> ident .)
    OUT_PORT        reduce using rule 54 (idents -> ident .)
    TRANS           reduce using rule 54 (idents -> ident .)
    EXTERN_TYPE     reduce using rule 54 (idents -> ident .)
    GLOBAL          reduce using rule 54 (idents -> ident .)
    STRUCT          reduce using rule 54 (idents -> ident .)
    ENUM            reduce using rule 54 (idents -> ident .)
    STATE_DECL      reduce using rule 54 (idents -> ident .)
    VOID            reduce using rule 54 (idents -> ident .)
    IDENT           reduce using rule 54 (idents -> ident .)
    $end            reduce using rule 54 (idents -> ident .)
    }               reduce using rule 54 (idents -> ident .)


state 42

    (12) decl -> TRANS ( idents . , idents , ident pairs ) idents
    (13) decl -> TRANS ( idents . , idents pairs ) idents

    ,               shift and go to state 61


state 43

    (53) idents -> { . identx }
    (55) identx -> . ident SEMI identx
    (56) identx -> . ident , identx
    (57) identx -> . ident identx
    (58) identx -> . empty
    (59) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 62
    identx                         shift and go to state 63
    empty                          shift and go to state 64

state 44

    (11) decl -> OUT_PORT ( ident . , type , var pairs ) SEMI

    ,               shift and go to state 65


state 45

    (9) decl -> ACTION ( ident . pairs ) statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 66
    empty                          shift and go to state 49

state 46

    (19) decl -> type ident pairs . SEMI

    SEMI            shift and go to state 67


state 47

    (21) decl -> type ident ( . params ) pairs SEMI
    (23) decl -> type ident ( . params ) pairs statements
    (44) params -> . param , params
    (45) params -> . param
    (46) params -> . empty
    (47) param -> . type ident
    (48) param -> . type STAR ident
    (49) param -> . type STAR ident = STRING
    (50) param -> . type ident = NUMBER
    (51) param -> . type ident = LIT_BOOL
    (52) param -> . type ident = STRING
    (2) empty -> .
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    param                          shift and go to state 68
    params                         shift and go to state 69
    typestr                        shift and go to state 17
    type                           shift and go to state 70
    empty                          shift and go to state 71

state 48

    (60) pairs -> , . pairsx
    (62) pairsx -> . pair , pairsx
    (63) pairsx -> . pair
    (64) pair -> . ident = STRING
    (65) pair -> . ident = ident
    (66) pair -> . ident = NUMBER
    (67) pair -> . STRING
    (59) ident -> . IDENT

    STRING          shift and go to state 73
    IDENT           shift and go to state 4

    pair                           shift and go to state 75
    ident                          shift and go to state 72
    pairsx                         shift and go to state 74

state 49

    (61) pairs -> empty .

    )               reduce using rule 61 (pairs -> empty .)
    SEMI            reduce using rule 61 (pairs -> empty .)
    {               reduce using rule 61 (pairs -> empty .)


state 50

    (6) decl -> PROTOCOL STRING SEMI .

    PROTOCOL        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    INCLUDE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    MACHINE         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ACTION          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IN_PORT         reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    OUT_PORT        reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    TRANS           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    EXTERN_TYPE     reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    GLOBAL          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STRUCT          reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    ENUM            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    STATE_DECL      reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    VOID            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    IDENT           reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    $end            reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)
    }               reduce using rule 6 (decl -> PROTOCOL STRING SEMI .)


state 51

    (20) decl -> void ident ( . params ) pairs SEMI
    (22) decl -> void ident ( . params ) pairs statements
    (44) params -> . param , params
    (45) params -> . param
    (46) params -> . empty
    (47) param -> . type ident
    (48) param -> . type STAR ident
    (49) param -> . type STAR ident = STRING
    (50) param -> . type ident = NUMBER
    (51) param -> . type ident = LIT_BOOL
    (52) param -> . type ident = STRING
    (2) empty -> .
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    param                          shift and go to state 68
    params                         shift and go to state 76
    typestr                        shift and go to state 17
    type                           shift and go to state 70
    empty                          shift and go to state 71

state 52

    (17) decl -> ENUM ( type . pairs ) { type_enums }
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 77
    empty                          shift and go to state 49

state 53

    (8) decl -> MACHINE ( ident . pairs ) : params { decls }
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 78
    empty                          shift and go to state 49

state 54

    (14) decl -> EXTERN_TYPE ( type . pairs ) SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 79
    empty                          shift and go to state 49

state 55

    (38) typestr -> typestr DOUBLE_COLON ident .

    DOUBLE_COLON    reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    IDENT           reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    ,               reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    STAR            reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    )               reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    DOT             reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    [               reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    SEMI            reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    ASSIGN          reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    SLASH           reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    PLUS            reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    DASH            reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    LT              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    GT              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    LE              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    GE              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    EQ              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    NE              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    AND             reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    OR              reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    RIGHTSHIFT      reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    LEFTSHIFT       reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)
    ]               reduce using rule 38 (typestr -> typestr DOUBLE_COLON ident .)


state 56

    (7) decl -> INCLUDE STRING SEMI .

    PROTOCOL        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    INCLUDE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    MACHINE         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ACTION          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IN_PORT         reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    OUT_PORT        reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    TRANS           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    EXTERN_TYPE     reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    GLOBAL          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STRUCT          reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    ENUM            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    STATE_DECL      reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    VOID            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    IDENT           reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    $end            reduce using rule 7 (decl -> INCLUDE STRING SEMI .)
    }               reduce using rule 7 (decl -> INCLUDE STRING SEMI .)


state 57

    (16) decl -> STRUCT ( type . pairs ) { type_members }
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 80
    empty                          shift and go to state 49

state 58

    (18) decl -> STATE_DECL ( type . pairs ) { type_states }
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 81
    empty                          shift and go to state 49

state 59

    (10) decl -> IN_PORT ( ident . , type , var pairs ) statements

    ,               shift and go to state 82


state 60

    (15) decl -> GLOBAL ( type pairs . ) { type_members }

    )               shift and go to state 83


state 61

    (12) decl -> TRANS ( idents , . idents , ident pairs ) idents
    (13) decl -> TRANS ( idents , . idents pairs ) idents
    (53) idents -> . { identx }
    (54) idents -> . ident
    (59) ident -> . IDENT

    {               shift and go to state 43
    IDENT           shift and go to state 4

    ident                          shift and go to state 41
    idents                         shift and go to state 84

state 62

    (55) identx -> ident . SEMI identx
    (56) identx -> ident . , identx
    (57) identx -> ident . identx
    (55) identx -> . ident SEMI identx
    (56) identx -> . ident , identx
    (57) identx -> . ident identx
    (58) identx -> . empty
    (59) ident -> . IDENT
    (2) empty -> .

    SEMI            shift and go to state 85
    ,               shift and go to state 87
    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 62
    identx                         shift and go to state 86
    empty                          shift and go to state 64

state 63

    (53) idents -> { identx . }

    }               shift and go to state 88


state 64

    (58) identx -> empty .

    }               reduce using rule 58 (identx -> empty .)


state 65

    (11) decl -> OUT_PORT ( ident , . type , var pairs ) SEMI
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    type                           shift and go to state 89
    typestr                        shift and go to state 17

state 66

    (9) decl -> ACTION ( ident pairs . ) statements

    )               shift and go to state 90


state 67

    (19) decl -> type ident pairs SEMI .

    PROTOCOL        reduce using rule 19 (decl -> type ident pairs SEMI .)
    INCLUDE         reduce using rule 19 (decl -> type ident pairs SEMI .)
    MACHINE         reduce using rule 19 (decl -> type ident pairs SEMI .)
    ACTION          reduce using rule 19 (decl -> type ident pairs SEMI .)
    IN_PORT         reduce using rule 19 (decl -> type ident pairs SEMI .)
    OUT_PORT        reduce using rule 19 (decl -> type ident pairs SEMI .)
    TRANS           reduce using rule 19 (decl -> type ident pairs SEMI .)
    EXTERN_TYPE     reduce using rule 19 (decl -> type ident pairs SEMI .)
    GLOBAL          reduce using rule 19 (decl -> type ident pairs SEMI .)
    STRUCT          reduce using rule 19 (decl -> type ident pairs SEMI .)
    ENUM            reduce using rule 19 (decl -> type ident pairs SEMI .)
    STATE_DECL      reduce using rule 19 (decl -> type ident pairs SEMI .)
    VOID            reduce using rule 19 (decl -> type ident pairs SEMI .)
    IDENT           reduce using rule 19 (decl -> type ident pairs SEMI .)
    $end            reduce using rule 19 (decl -> type ident pairs SEMI .)
    }               reduce using rule 19 (decl -> type ident pairs SEMI .)


state 68

    (44) params -> param . , params
    (45) params -> param .

    ,               shift and go to state 91
    {               reduce using rule 45 (params -> param .)
    )               reduce using rule 45 (params -> param .)


state 69

    (21) decl -> type ident ( params . ) pairs SEMI
    (23) decl -> type ident ( params . ) pairs statements

    )               shift and go to state 92


state 70

    (47) param -> type . ident
    (48) param -> type . STAR ident
    (49) param -> type . STAR ident = STRING
    (50) param -> type . ident = NUMBER
    (51) param -> type . ident = LIT_BOOL
    (52) param -> type . ident = STRING
    (59) ident -> . IDENT

    STAR            shift and go to state 94
    IDENT           shift and go to state 4

    ident                          shift and go to state 93

state 71

    (46) params -> empty .

    {               reduce using rule 46 (params -> empty .)
    )               reduce using rule 46 (params -> empty .)


state 72

    (64) pair -> ident . = STRING
    (65) pair -> ident . = ident
    (66) pair -> ident . = NUMBER

    =               shift and go to state 95


state 73

    (67) pair -> STRING .

    ,               reduce using rule 67 (pair -> STRING .)
    SEMI            reduce using rule 67 (pair -> STRING .)
    )               reduce using rule 67 (pair -> STRING .)
    {               reduce using rule 67 (pair -> STRING .)


state 74

    (60) pairs -> , pairsx .

    )               reduce using rule 60 (pairs -> , pairsx .)
    SEMI            reduce using rule 60 (pairs -> , pairsx .)
    {               reduce using rule 60 (pairs -> , pairsx .)


state 75

    (62) pairsx -> pair . , pairsx
    (63) pairsx -> pair .

    ,               shift and go to state 96
    SEMI            reduce using rule 63 (pairsx -> pair .)
    )               reduce using rule 63 (pairsx -> pair .)
    {               reduce using rule 63 (pairsx -> pair .)


state 76

    (20) decl -> void ident ( params . ) pairs SEMI
    (22) decl -> void ident ( params . ) pairs statements

    )               shift and go to state 97


state 77

    (17) decl -> ENUM ( type pairs . ) { type_enums }

    )               shift and go to state 98


state 78

    (8) decl -> MACHINE ( ident pairs . ) : params { decls }

    )               shift and go to state 99


state 79

    (14) decl -> EXTERN_TYPE ( type pairs . ) SEMI

    )               shift and go to state 100


state 80

    (16) decl -> STRUCT ( type pairs . ) { type_members }

    )               shift and go to state 101


state 81

    (18) decl -> STATE_DECL ( type pairs . ) { type_states }

    )               shift and go to state 102


state 82

    (10) decl -> IN_PORT ( ident , . type , var pairs ) statements
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    typestr                        shift and go to state 17
    type                           shift and go to state 103

state 83

    (15) decl -> GLOBAL ( type pairs ) . { type_members }

    {               shift and go to state 104


state 84

    (12) decl -> TRANS ( idents , idents . , ident pairs ) idents
    (13) decl -> TRANS ( idents , idents . pairs ) idents
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 106
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 105
    empty                          shift and go to state 49

state 85

    (55) identx -> ident SEMI . identx
    (55) identx -> . ident SEMI identx
    (56) identx -> . ident , identx
    (57) identx -> . ident identx
    (58) identx -> . empty
    (59) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 62
    identx                         shift and go to state 107
    empty                          shift and go to state 64

state 86

    (57) identx -> ident identx .

    }               reduce using rule 57 (identx -> ident identx .)


state 87

    (56) identx -> ident , . identx
    (55) identx -> . ident SEMI identx
    (56) identx -> . ident , identx
    (57) identx -> . ident identx
    (58) identx -> . empty
    (59) ident -> . IDENT
    (2) empty -> .

    IDENT           shift and go to state 4
    }               reduce using rule 2 (empty -> .)

    ident                          shift and go to state 62
    identx                         shift and go to state 108
    empty                          shift and go to state 64

state 88

    (53) idents -> { identx } .

    ,               reduce using rule 53 (idents -> { identx } .)
    )               reduce using rule 53 (idents -> { identx } .)
    PROTOCOL        reduce using rule 53 (idents -> { identx } .)
    INCLUDE         reduce using rule 53 (idents -> { identx } .)
    MACHINE         reduce using rule 53 (idents -> { identx } .)
    ACTION          reduce using rule 53 (idents -> { identx } .)
    IN_PORT         reduce using rule 53 (idents -> { identx } .)
    OUT_PORT        reduce using rule 53 (idents -> { identx } .)
    TRANS           reduce using rule 53 (idents -> { identx } .)
    EXTERN_TYPE     reduce using rule 53 (idents -> { identx } .)
    GLOBAL          reduce using rule 53 (idents -> { identx } .)
    STRUCT          reduce using rule 53 (idents -> { identx } .)
    ENUM            reduce using rule 53 (idents -> { identx } .)
    STATE_DECL      reduce using rule 53 (idents -> { identx } .)
    VOID            reduce using rule 53 (idents -> { identx } .)
    IDENT           reduce using rule 53 (idents -> { identx } .)
    $end            reduce using rule 53 (idents -> { identx } .)
    }               reduce using rule 53 (idents -> { identx } .)


state 89

    (11) decl -> OUT_PORT ( ident , type . , var pairs ) SEMI

    ,               shift and go to state 109


state 90

    (9) decl -> ACTION ( ident pairs ) . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    {               shift and go to state 111

    statements                     shift and go to state 110

state 91

    (44) params -> param , . params
    (44) params -> . param , params
    (45) params -> . param
    (46) params -> . empty
    (47) param -> . type ident
    (48) param -> . type STAR ident
    (49) param -> . type STAR ident = STRING
    (50) param -> . type ident = NUMBER
    (51) param -> . type ident = LIT_BOOL
    (52) param -> . type ident = STRING
    (2) empty -> .
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    param                          shift and go to state 68
    params                         shift and go to state 112
    typestr                        shift and go to state 17
    type                           shift and go to state 70
    empty                          shift and go to state 71

state 92

    (21) decl -> type ident ( params ) . pairs SEMI
    (23) decl -> type ident ( params ) . pairs statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 113
    empty                          shift and go to state 49

state 93

    (47) param -> type ident .
    (50) param -> type ident . = NUMBER
    (51) param -> type ident . = LIT_BOOL
    (52) param -> type ident . = STRING

    ,               reduce using rule 47 (param -> type ident .)
    )               reduce using rule 47 (param -> type ident .)
    {               reduce using rule 47 (param -> type ident .)
    =               shift and go to state 114


state 94

    (48) param -> type STAR . ident
    (49) param -> type STAR . ident = STRING
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 115

state 95

    (64) pair -> ident = . STRING
    (65) pair -> ident = . ident
    (66) pair -> ident = . NUMBER
    (59) ident -> . IDENT

    STRING          shift and go to state 117
    NUMBER          shift and go to state 118
    IDENT           shift and go to state 4

    ident                          shift and go to state 116

state 96

    (62) pairsx -> pair , . pairsx
    (62) pairsx -> . pair , pairsx
    (63) pairsx -> . pair
    (64) pair -> . ident = STRING
    (65) pair -> . ident = ident
    (66) pair -> . ident = NUMBER
    (67) pair -> . STRING
    (59) ident -> . IDENT

    STRING          shift and go to state 73
    IDENT           shift and go to state 4

    pair                           shift and go to state 75
    ident                          shift and go to state 72
    pairsx                         shift and go to state 119

state 97

    (20) decl -> void ident ( params ) . pairs SEMI
    (22) decl -> void ident ( params ) . pairs statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 120
    empty                          shift and go to state 49

state 98

    (17) decl -> ENUM ( type pairs ) . { type_enums }

    {               shift and go to state 121


state 99

    (8) decl -> MACHINE ( ident pairs ) . : params { decls }

    :               shift and go to state 122


state 100

    (14) decl -> EXTERN_TYPE ( type pairs ) . SEMI

    SEMI            shift and go to state 123


state 101

    (16) decl -> STRUCT ( type pairs ) . { type_members }

    {               shift and go to state 124


state 102

    (18) decl -> STATE_DECL ( type pairs ) . { type_states }

    {               shift and go to state 125


state 103

    (10) decl -> IN_PORT ( ident , type . , var pairs ) statements

    ,               shift and go to state 126


state 104

    (15) decl -> GLOBAL ( type pairs ) { . type_members }
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . type_or_void ident ( types ) pairs SEMI
    (27) type_member -> . type_or_void ident pairs SEMI
    (28) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (42) type_or_void -> . type
    (43) type_or_void -> . void
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    void                           shift and go to state 129
    type_members                   shift and go to state 127
    type_member                    shift and go to state 131
    type                           shift and go to state 130
    type_or_void                   shift and go to state 128
    empty                          shift and go to state 132

state 105

    (13) decl -> TRANS ( idents , idents pairs . ) idents

    )               shift and go to state 133


state 106

    (12) decl -> TRANS ( idents , idents , . ident pairs ) idents
    (60) pairs -> , . pairsx
    (59) ident -> . IDENT
    (62) pairsx -> . pair , pairsx
    (63) pairsx -> . pair
    (64) pair -> . ident = STRING
    (65) pair -> . ident = ident
    (66) pair -> . ident = NUMBER
    (67) pair -> . STRING

    IDENT           shift and go to state 4
    STRING          shift and go to state 73

    pairsx                         shift and go to state 74
    pair                           shift and go to state 75
    ident                          shift and go to state 134

state 107

    (55) identx -> ident SEMI identx .

    }               reduce using rule 55 (identx -> ident SEMI identx .)


state 108

    (56) identx -> ident , identx .

    }               reduce using rule 56 (identx -> ident , identx .)


state 109

    (11) decl -> OUT_PORT ( ident , type , . var pairs ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 136
    ident                          shift and go to state 135

state 110

    (9) decl -> ACTION ( ident pairs ) statements .

    PROTOCOL        reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    INCLUDE         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    MACHINE         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    ACTION          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    IN_PORT         reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    OUT_PORT        reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    TRANS           reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    EXTERN_TYPE     reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    GLOBAL          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    STRUCT          reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    ENUM            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    STATE_DECL      reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    VOID            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    IDENT           reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    $end            reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)
    }               reduce using rule 9 (decl -> ACTION ( ident pairs ) statements .)


state 111

    (68) statements -> { . statements_inner }
    (69) statements -> { . }
    (70) statements_inner -> . statement statements_inner
    (71) statements_inner -> . statement
    (75) statement -> . expr SEMI
    (76) statement -> . expr ASSIGN expr SEMI
    (77) statement -> . ENQUEUE ( var , type pairs ) statements
    (78) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (79) statement -> . PEEK ( var , type pairs ) statements
    (80) statement -> . COPY_HEAD ( var , var pairs ) SEMI
    (81) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (82) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (85) statement -> . RETURN expr SEMI
    (86) statement -> . if_statement
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (87) if_statement -> . IF ( expr ) statements
    (88) if_statement -> . IF ( expr ) statements ELSE statements
    (89) if_statement -> . IF ( expr ) statements ELSE if_statement
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    }               shift and go to state 169
    ENQUEUE         shift and go to state 150
    STALL_AND_WAIT  shift and go to state 157
    PEEK            shift and go to state 137
    COPY_HEAD       shift and go to state 151
    CHECK_ALLOCATE  shift and go to state 146
    CHECK_STOP_SLOTS shift and go to state 167
    RETURN          shift and go to state 138
    NOT             shift and go to state 168
    DASH            shift and go to state 159
    IF              shift and go to state 160
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 164
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    statements_inner               shift and go to state 142
    statement                      shift and go to state 152
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    if_statement                   shift and go to state 154
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 112

    (44) params -> param , params .

    {               reduce using rule 44 (params -> param , params .)
    )               reduce using rule 44 (params -> param , params .)


state 113

    (21) decl -> type ident ( params ) pairs . SEMI
    (23) decl -> type ident ( params ) pairs . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    SEMI            shift and go to state 171
    {               shift and go to state 111

    statements                     shift and go to state 170

state 114

    (50) param -> type ident = . NUMBER
    (51) param -> type ident = . LIT_BOOL
    (52) param -> type ident = . STRING

    NUMBER          shift and go to state 173
    LIT_BOOL        shift and go to state 174
    STRING          shift and go to state 172


state 115

    (48) param -> type STAR ident .
    (49) param -> type STAR ident . = STRING

    ,               reduce using rule 48 (param -> type STAR ident .)
    )               reduce using rule 48 (param -> type STAR ident .)
    {               reduce using rule 48 (param -> type STAR ident .)
    =               shift and go to state 175


state 116

    (65) pair -> ident = ident .

    ,               reduce using rule 65 (pair -> ident = ident .)
    SEMI            reduce using rule 65 (pair -> ident = ident .)
    )               reduce using rule 65 (pair -> ident = ident .)
    {               reduce using rule 65 (pair -> ident = ident .)


state 117

    (64) pair -> ident = STRING .

    ,               reduce using rule 64 (pair -> ident = STRING .)
    SEMI            reduce using rule 64 (pair -> ident = STRING .)
    )               reduce using rule 64 (pair -> ident = STRING .)
    {               reduce using rule 64 (pair -> ident = STRING .)


state 118

    (66) pair -> ident = NUMBER .

    ,               reduce using rule 66 (pair -> ident = NUMBER .)
    SEMI            reduce using rule 66 (pair -> ident = NUMBER .)
    )               reduce using rule 66 (pair -> ident = NUMBER .)
    {               reduce using rule 66 (pair -> ident = NUMBER .)


state 119

    (62) pairsx -> pair , pairsx .

    SEMI            reduce using rule 62 (pairsx -> pair , pairsx .)
    )               reduce using rule 62 (pairsx -> pair , pairsx .)
    {               reduce using rule 62 (pairsx -> pair , pairsx .)


state 120

    (20) decl -> void ident ( params ) pairs . SEMI
    (22) decl -> void ident ( params ) pairs . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    SEMI            shift and go to state 177
    {               shift and go to state 111

    statements                     shift and go to state 176

state 121

    (17) decl -> ENUM ( type pairs ) { . type_enums }
    (29) type_enums -> . type_enum type_enums
    (30) type_enums -> . empty
    (31) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 178
    type_enums                     shift and go to state 179
    type_enum                      shift and go to state 180
    empty                          shift and go to state 181

state 122

    (8) decl -> MACHINE ( ident pairs ) : . params { decls }
    (44) params -> . param , params
    (45) params -> . param
    (46) params -> . empty
    (47) param -> . type ident
    (48) param -> . type STAR ident
    (49) param -> . type STAR ident = STRING
    (50) param -> . type ident = NUMBER
    (51) param -> . type ident = LIT_BOOL
    (52) param -> . type ident = STRING
    (2) empty -> .
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    {               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    param                          shift and go to state 68
    params                         shift and go to state 182
    type                           shift and go to state 70
    typestr                        shift and go to state 17
    empty                          shift and go to state 71

state 123

    (14) decl -> EXTERN_TYPE ( type pairs ) SEMI .

    PROTOCOL        reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    INCLUDE         reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    MACHINE         reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ACTION          reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IN_PORT         reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    OUT_PORT        reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    TRANS           reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    GLOBAL          reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STRUCT          reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    ENUM            reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    STATE_DECL      reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    VOID            reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    IDENT           reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    $end            reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)
    }               reduce using rule 14 (decl -> EXTERN_TYPE ( type pairs ) SEMI .)


state 124

    (16) decl -> STRUCT ( type pairs ) { . type_members }
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . type_or_void ident ( types ) pairs SEMI
    (27) type_member -> . type_or_void ident pairs SEMI
    (28) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (42) type_or_void -> . type
    (43) type_or_void -> . void
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    void                           shift and go to state 129
    type_members                   shift and go to state 183
    type_member                    shift and go to state 131
    type                           shift and go to state 130
    type_or_void                   shift and go to state 128
    empty                          shift and go to state 132

state 125

    (18) decl -> STATE_DECL ( type pairs ) { . type_states }
    (32) type_states -> . type_state type_states
    (33) type_states -> . empty
    (34) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 184
    type_states                    shift and go to state 185
    type_state                     shift and go to state 186
    empty                          shift and go to state 187

state 126

    (10) decl -> IN_PORT ( ident , type , . var pairs ) statements
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 188
    ident                          shift and go to state 135

state 127

    (15) decl -> GLOBAL ( type pairs ) { type_members . }

    }               shift and go to state 189


state 128

    (26) type_member -> type_or_void . ident ( types ) pairs SEMI
    (27) type_member -> type_or_void . ident pairs SEMI
    (28) type_member -> type_or_void . ident ASSIGN expr SEMI
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 190

state 129

    (43) type_or_void -> void .

    IDENT           reduce using rule 43 (type_or_void -> void .)


state 130

    (42) type_or_void -> type .

    IDENT           reduce using rule 42 (type_or_void -> type .)


state 131

    (24) type_members -> type_member . type_members
    (24) type_members -> . type_member type_members
    (25) type_members -> . empty
    (26) type_member -> . type_or_void ident ( types ) pairs SEMI
    (27) type_member -> . type_or_void ident pairs SEMI
    (28) type_member -> . type_or_void ident ASSIGN expr SEMI
    (2) empty -> .
    (42) type_or_void -> . type
    (43) type_or_void -> . void
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    void                           shift and go to state 129
    type_members                   shift and go to state 191
    empty                          shift and go to state 132
    type_member                    shift and go to state 131
    type                           shift and go to state 130
    type_or_void                   shift and go to state 128

state 132

    (25) type_members -> empty .

    }               reduce using rule 25 (type_members -> empty .)


state 133

    (13) decl -> TRANS ( idents , idents pairs ) . idents
    (53) idents -> . { identx }
    (54) idents -> . ident
    (59) ident -> . IDENT

    {               shift and go to state 43
    IDENT           shift and go to state 4

    ident                          shift and go to state 41
    idents                         shift and go to state 192

state 134

    (12) decl -> TRANS ( idents , idents , ident . pairs ) idents
    (64) pair -> ident . = STRING
    (65) pair -> ident . = ident
    (66) pair -> ident . = NUMBER
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    =               shift and go to state 95
    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 193
    empty                          shift and go to state 49

state 135

    (130) var -> ident .

    ,               reduce using rule 130 (var -> ident .)
    )               reduce using rule 130 (var -> ident .)
    DOT             reduce using rule 130 (var -> ident .)
    [               reduce using rule 130 (var -> ident .)


state 136

    (11) decl -> OUT_PORT ( ident , type , var . pairs ) SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 194
    empty                          shift and go to state 49

state 137

    (79) statement -> PEEK . ( var , type pairs ) statements

    (               shift and go to state 195


state 138

    (85) statement -> RETURN . expr SEMI
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 196
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 139

    (127) literal -> FLOATNUMBER .

    DOT             reduce using rule 127 (literal -> FLOATNUMBER .)
    [               reduce using rule 127 (literal -> FLOATNUMBER .)
    STAR            reduce using rule 127 (literal -> FLOATNUMBER .)
    SLASH           reduce using rule 127 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 127 (literal -> FLOATNUMBER .)
    DASH            reduce using rule 127 (literal -> FLOATNUMBER .)
    LT              reduce using rule 127 (literal -> FLOATNUMBER .)
    GT              reduce using rule 127 (literal -> FLOATNUMBER .)
    LE              reduce using rule 127 (literal -> FLOATNUMBER .)
    GE              reduce using rule 127 (literal -> FLOATNUMBER .)
    EQ              reduce using rule 127 (literal -> FLOATNUMBER .)
    NE              reduce using rule 127 (literal -> FLOATNUMBER .)
    AND             reduce using rule 127 (literal -> FLOATNUMBER .)
    OR              reduce using rule 127 (literal -> FLOATNUMBER .)
    RIGHTSHIFT      reduce using rule 127 (literal -> FLOATNUMBER .)
    LEFTSHIFT       reduce using rule 127 (literal -> FLOATNUMBER .)
    SEMI            reduce using rule 127 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 127 (literal -> FLOATNUMBER .)
    )               reduce using rule 127 (literal -> FLOATNUMBER .)
    ]               reduce using rule 127 (literal -> FLOATNUMBER .)
    ,               reduce using rule 127 (literal -> FLOATNUMBER .)


state 140

    (99) aexpr -> CHIP . [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP . [ expr ] DOT var [ expr ] DOT var DOT field

    [               shift and go to state 197


state 141

    (126) literal -> NUMBER .

    DOT             reduce using rule 126 (literal -> NUMBER .)
    [               reduce using rule 126 (literal -> NUMBER .)
    STAR            reduce using rule 126 (literal -> NUMBER .)
    SLASH           reduce using rule 126 (literal -> NUMBER .)
    PLUS            reduce using rule 126 (literal -> NUMBER .)
    DASH            reduce using rule 126 (literal -> NUMBER .)
    LT              reduce using rule 126 (literal -> NUMBER .)
    GT              reduce using rule 126 (literal -> NUMBER .)
    LE              reduce using rule 126 (literal -> NUMBER .)
    GE              reduce using rule 126 (literal -> NUMBER .)
    EQ              reduce using rule 126 (literal -> NUMBER .)
    NE              reduce using rule 126 (literal -> NUMBER .)
    AND             reduce using rule 126 (literal -> NUMBER .)
    OR              reduce using rule 126 (literal -> NUMBER .)
    RIGHTSHIFT      reduce using rule 126 (literal -> NUMBER .)
    LEFTSHIFT       reduce using rule 126 (literal -> NUMBER .)
    SEMI            reduce using rule 126 (literal -> NUMBER .)
    ASSIGN          reduce using rule 126 (literal -> NUMBER .)
    )               reduce using rule 126 (literal -> NUMBER .)
    ]               reduce using rule 126 (literal -> NUMBER .)
    ,               reduce using rule 126 (literal -> NUMBER .)


state 142

    (68) statements -> { statements_inner . }

    }               shift and go to state 198


state 143

    (95) aexpr -> NEW . type
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    type                           shift and go to state 199

state 144

    (105) expr -> aexpr .
    (101) aexpr -> aexpr . DOT ident
    (102) aexpr -> aexpr . DOT ident ( exprs )
    (103) aexpr -> aexpr . [ exprs ]

    STAR            reduce using rule 105 (expr -> aexpr .)
    SLASH           reduce using rule 105 (expr -> aexpr .)
    PLUS            reduce using rule 105 (expr -> aexpr .)
    DASH            reduce using rule 105 (expr -> aexpr .)
    LT              reduce using rule 105 (expr -> aexpr .)
    GT              reduce using rule 105 (expr -> aexpr .)
    LE              reduce using rule 105 (expr -> aexpr .)
    GE              reduce using rule 105 (expr -> aexpr .)
    EQ              reduce using rule 105 (expr -> aexpr .)
    NE              reduce using rule 105 (expr -> aexpr .)
    AND             reduce using rule 105 (expr -> aexpr .)
    OR              reduce using rule 105 (expr -> aexpr .)
    RIGHTSHIFT      reduce using rule 105 (expr -> aexpr .)
    LEFTSHIFT       reduce using rule 105 (expr -> aexpr .)
    SEMI            reduce using rule 105 (expr -> aexpr .)
    ASSIGN          reduce using rule 105 (expr -> aexpr .)
    )               reduce using rule 105 (expr -> aexpr .)
    ]               reduce using rule 105 (expr -> aexpr .)
    ,               reduce using rule 105 (expr -> aexpr .)
    DOT             shift and go to state 201
    [               shift and go to state 200


state 145

    (83) aexpr -> STATIC_CAST . ( type , expr )
    (84) aexpr -> STATIC_CAST . ( type , STRING , expr )

    (               shift and go to state 202


state 146

    (81) statement -> CHECK_ALLOCATE . ( var ) SEMI

    (               shift and go to state 203


state 147

    (122) aexpr -> ( . expr )
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 204
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 148

    (124) aexpr -> IS_INVALID . ( var )

    (               shift and go to state 205


state 149

    (93) aexpr -> enumeration .

    DOT             reduce using rule 93 (aexpr -> enumeration .)
    [               reduce using rule 93 (aexpr -> enumeration .)
    )               reduce using rule 93 (aexpr -> enumeration .)
    STAR            reduce using rule 93 (aexpr -> enumeration .)
    SLASH           reduce using rule 93 (aexpr -> enumeration .)
    PLUS            reduce using rule 93 (aexpr -> enumeration .)
    DASH            reduce using rule 93 (aexpr -> enumeration .)
    LT              reduce using rule 93 (aexpr -> enumeration .)
    GT              reduce using rule 93 (aexpr -> enumeration .)
    LE              reduce using rule 93 (aexpr -> enumeration .)
    GE              reduce using rule 93 (aexpr -> enumeration .)
    EQ              reduce using rule 93 (aexpr -> enumeration .)
    NE              reduce using rule 93 (aexpr -> enumeration .)
    AND             reduce using rule 93 (aexpr -> enumeration .)
    OR              reduce using rule 93 (aexpr -> enumeration .)
    RIGHTSHIFT      reduce using rule 93 (aexpr -> enumeration .)
    LEFTSHIFT       reduce using rule 93 (aexpr -> enumeration .)
    SEMI            reduce using rule 93 (aexpr -> enumeration .)
    ,               reduce using rule 93 (aexpr -> enumeration .)
    ]               reduce using rule 93 (aexpr -> enumeration .)
    ASSIGN          reduce using rule 93 (aexpr -> enumeration .)


state 150

    (77) statement -> ENQUEUE . ( var , type pairs ) statements

    (               shift and go to state 206


state 151

    (80) statement -> COPY_HEAD . ( var , var pairs ) SEMI

    (               shift and go to state 207


state 152

    (70) statements_inner -> statement . statements_inner
    (71) statements_inner -> statement .
    (70) statements_inner -> . statement statements_inner
    (71) statements_inner -> . statement
    (75) statement -> . expr SEMI
    (76) statement -> . expr ASSIGN expr SEMI
    (77) statement -> . ENQUEUE ( var , type pairs ) statements
    (78) statement -> . STALL_AND_WAIT ( var , var ) SEMI
    (79) statement -> . PEEK ( var , type pairs ) statements
    (80) statement -> . COPY_HEAD ( var , var pairs ) SEMI
    (81) statement -> . CHECK_ALLOCATE ( var ) SEMI
    (82) statement -> . CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI
    (85) statement -> . RETURN expr SEMI
    (86) statement -> . if_statement
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (87) if_statement -> . IF ( expr ) statements
    (88) if_statement -> . IF ( expr ) statements ELSE statements
    (89) if_statement -> . IF ( expr ) statements ELSE if_statement
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    }               reduce using rule 71 (statements_inner -> statement .)
    ENQUEUE         shift and go to state 150
    STALL_AND_WAIT  shift and go to state 157
    PEEK            shift and go to state 137
    COPY_HEAD       shift and go to state 151
    CHECK_ALLOCATE  shift and go to state 146
    CHECK_STOP_SLOTS shift and go to state 167
    RETURN          shift and go to state 138
    NOT             shift and go to state 168
    DASH            shift and go to state 159
    IF              shift and go to state 160
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 164
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    statements_inner               shift and go to state 208
    statement                      shift and go to state 152
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    if_statement                   shift and go to state 154
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 153

    (90) aexpr -> var .

    DOT             reduce using rule 90 (aexpr -> var .)
    [               reduce using rule 90 (aexpr -> var .)
    )               reduce using rule 90 (aexpr -> var .)
    STAR            reduce using rule 90 (aexpr -> var .)
    SLASH           reduce using rule 90 (aexpr -> var .)
    PLUS            reduce using rule 90 (aexpr -> var .)
    DASH            reduce using rule 90 (aexpr -> var .)
    LT              reduce using rule 90 (aexpr -> var .)
    GT              reduce using rule 90 (aexpr -> var .)
    LE              reduce using rule 90 (aexpr -> var .)
    GE              reduce using rule 90 (aexpr -> var .)
    EQ              reduce using rule 90 (aexpr -> var .)
    NE              reduce using rule 90 (aexpr -> var .)
    AND             reduce using rule 90 (aexpr -> var .)
    OR              reduce using rule 90 (aexpr -> var .)
    RIGHTSHIFT      reduce using rule 90 (aexpr -> var .)
    LEFTSHIFT       reduce using rule 90 (aexpr -> var .)
    SEMI            reduce using rule 90 (aexpr -> var .)
    ,               reduce using rule 90 (aexpr -> var .)
    ]               reduce using rule 90 (aexpr -> var .)
    ASSIGN          reduce using rule 90 (aexpr -> var .)


state 154

    (86) statement -> if_statement .

    ENQUEUE         reduce using rule 86 (statement -> if_statement .)
    STALL_AND_WAIT  reduce using rule 86 (statement -> if_statement .)
    PEEK            reduce using rule 86 (statement -> if_statement .)
    COPY_HEAD       reduce using rule 86 (statement -> if_statement .)
    CHECK_ALLOCATE  reduce using rule 86 (statement -> if_statement .)
    CHECK_STOP_SLOTS reduce using rule 86 (statement -> if_statement .)
    RETURN          reduce using rule 86 (statement -> if_statement .)
    NOT             reduce using rule 86 (statement -> if_statement .)
    DASH            reduce using rule 86 (statement -> if_statement .)
    IF              reduce using rule 86 (statement -> if_statement .)
    STATIC_CAST     reduce using rule 86 (statement -> if_statement .)
    NEW             reduce using rule 86 (statement -> if_statement .)
    OOD             reduce using rule 86 (statement -> if_statement .)
    THIS            reduce using rule 86 (statement -> if_statement .)
    CHIP            reduce using rule 86 (statement -> if_statement .)
    (               reduce using rule 86 (statement -> if_statement .)
    IS_VALID        reduce using rule 86 (statement -> if_statement .)
    IS_INVALID      reduce using rule 86 (statement -> if_statement .)
    STRING          reduce using rule 86 (statement -> if_statement .)
    NUMBER          reduce using rule 86 (statement -> if_statement .)
    FLOATNUMBER     reduce using rule 86 (statement -> if_statement .)
    LIT_BOOL        reduce using rule 86 (statement -> if_statement .)
    IDENT           reduce using rule 86 (statement -> if_statement .)
    }               reduce using rule 86 (statement -> if_statement .)


state 155

    (91) aexpr -> type . ident
    (104) aexpr -> type . DOUBLE_COLON ident ( exprs )
    (59) ident -> . IDENT

    DOUBLE_COLON    shift and go to state 210
    IDENT           shift and go to state 4

    ident                          shift and go to state 209

state 156

    (125) literal -> STRING .

    DOT             reduce using rule 125 (literal -> STRING .)
    [               reduce using rule 125 (literal -> STRING .)
    STAR            reduce using rule 125 (literal -> STRING .)
    SLASH           reduce using rule 125 (literal -> STRING .)
    PLUS            reduce using rule 125 (literal -> STRING .)
    DASH            reduce using rule 125 (literal -> STRING .)
    LT              reduce using rule 125 (literal -> STRING .)
    GT              reduce using rule 125 (literal -> STRING .)
    LE              reduce using rule 125 (literal -> STRING .)
    GE              reduce using rule 125 (literal -> STRING .)
    EQ              reduce using rule 125 (literal -> STRING .)
    NE              reduce using rule 125 (literal -> STRING .)
    AND             reduce using rule 125 (literal -> STRING .)
    OR              reduce using rule 125 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 125 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 125 (literal -> STRING .)
    SEMI            reduce using rule 125 (literal -> STRING .)
    ASSIGN          reduce using rule 125 (literal -> STRING .)
    )               reduce using rule 125 (literal -> STRING .)
    ]               reduce using rule 125 (literal -> STRING .)
    ,               reduce using rule 125 (literal -> STRING .)


state 157

    (78) statement -> STALL_AND_WAIT . ( var , var ) SEMI

    (               shift and go to state 211


state 158

    (92) aexpr -> literal .

    DOT             reduce using rule 92 (aexpr -> literal .)
    [               reduce using rule 92 (aexpr -> literal .)
    )               reduce using rule 92 (aexpr -> literal .)
    STAR            reduce using rule 92 (aexpr -> literal .)
    SLASH           reduce using rule 92 (aexpr -> literal .)
    PLUS            reduce using rule 92 (aexpr -> literal .)
    DASH            reduce using rule 92 (aexpr -> literal .)
    LT              reduce using rule 92 (aexpr -> literal .)
    GT              reduce using rule 92 (aexpr -> literal .)
    LE              reduce using rule 92 (aexpr -> literal .)
    GE              reduce using rule 92 (aexpr -> literal .)
    EQ              reduce using rule 92 (aexpr -> literal .)
    NE              reduce using rule 92 (aexpr -> literal .)
    AND             reduce using rule 92 (aexpr -> literal .)
    OR              reduce using rule 92 (aexpr -> literal .)
    RIGHTSHIFT      reduce using rule 92 (aexpr -> literal .)
    LEFTSHIFT       reduce using rule 92 (aexpr -> literal .)
    SEMI            reduce using rule 92 (aexpr -> literal .)
    ,               reduce using rule 92 (aexpr -> literal .)
    ]               reduce using rule 92 (aexpr -> literal .)
    ASSIGN          reduce using rule 92 (aexpr -> literal .)


state 159

    (121) expr -> DASH . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 212
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 160

    (87) if_statement -> IF . ( expr ) statements
    (88) if_statement -> IF . ( expr ) statements ELSE statements
    (89) if_statement -> IF . ( expr ) statements ELSE if_statement

    (               shift and go to state 213


state 161

    (96) aexpr -> OOD .

    DOT             reduce using rule 96 (aexpr -> OOD .)
    [               reduce using rule 96 (aexpr -> OOD .)
    )               reduce using rule 96 (aexpr -> OOD .)
    STAR            reduce using rule 96 (aexpr -> OOD .)
    SLASH           reduce using rule 96 (aexpr -> OOD .)
    PLUS            reduce using rule 96 (aexpr -> OOD .)
    DASH            reduce using rule 96 (aexpr -> OOD .)
    LT              reduce using rule 96 (aexpr -> OOD .)
    GT              reduce using rule 96 (aexpr -> OOD .)
    LE              reduce using rule 96 (aexpr -> OOD .)
    GE              reduce using rule 96 (aexpr -> OOD .)
    EQ              reduce using rule 96 (aexpr -> OOD .)
    NE              reduce using rule 96 (aexpr -> OOD .)
    AND             reduce using rule 96 (aexpr -> OOD .)
    OR              reduce using rule 96 (aexpr -> OOD .)
    RIGHTSHIFT      reduce using rule 96 (aexpr -> OOD .)
    LEFTSHIFT       reduce using rule 96 (aexpr -> OOD .)
    SEMI            reduce using rule 96 (aexpr -> OOD .)
    ,               reduce using rule 96 (aexpr -> OOD .)
    ]               reduce using rule 96 (aexpr -> OOD .)
    ASSIGN          reduce using rule 96 (aexpr -> OOD .)


state 162

    (94) aexpr -> ident . ( exprs )
    (130) var -> ident .
    (129) enumeration -> ident . : ident
    (39) typestr -> ident .

    (               shift and go to state 214
    DOT             reduce using rule 130 (var -> ident .)
    [               reduce using rule 130 (var -> ident .)
    ]               reduce using rule 130 (var -> ident .)
    STAR            reduce using rule 130 (var -> ident .)
    SLASH           reduce using rule 130 (var -> ident .)
    PLUS            reduce using rule 130 (var -> ident .)
    DASH            reduce using rule 130 (var -> ident .)
    LT              reduce using rule 130 (var -> ident .)
    GT              reduce using rule 130 (var -> ident .)
    LE              reduce using rule 130 (var -> ident .)
    GE              reduce using rule 130 (var -> ident .)
    EQ              reduce using rule 130 (var -> ident .)
    NE              reduce using rule 130 (var -> ident .)
    AND             reduce using rule 130 (var -> ident .)
    OR              reduce using rule 130 (var -> ident .)
    RIGHTSHIFT      reduce using rule 130 (var -> ident .)
    LEFTSHIFT       reduce using rule 130 (var -> ident .)
    SEMI            reduce using rule 130 (var -> ident .)
    ASSIGN          reduce using rule 130 (var -> ident .)
    )               reduce using rule 130 (var -> ident .)
    ,               reduce using rule 130 (var -> ident .)
    :               shift and go to state 215
    DOUBLE_COLON    reduce using rule 39 (typestr -> ident .)
    IDENT           reduce using rule 39 (typestr -> ident .)


state 163

    (97) aexpr -> THIS . DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> THIS . DOT var [ expr ] DOT var DOT field

    DOT             shift and go to state 216


state 164

    (75) statement -> expr . SEMI
    (76) statement -> expr . ASSIGN expr SEMI
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 221
    ASSIGN          shift and go to state 231
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 165

    (128) literal -> LIT_BOOL .

    DOT             reduce using rule 128 (literal -> LIT_BOOL .)
    [               reduce using rule 128 (literal -> LIT_BOOL .)
    STAR            reduce using rule 128 (literal -> LIT_BOOL .)
    SLASH           reduce using rule 128 (literal -> LIT_BOOL .)
    PLUS            reduce using rule 128 (literal -> LIT_BOOL .)
    DASH            reduce using rule 128 (literal -> LIT_BOOL .)
    LT              reduce using rule 128 (literal -> LIT_BOOL .)
    GT              reduce using rule 128 (literal -> LIT_BOOL .)
    LE              reduce using rule 128 (literal -> LIT_BOOL .)
    GE              reduce using rule 128 (literal -> LIT_BOOL .)
    EQ              reduce using rule 128 (literal -> LIT_BOOL .)
    NE              reduce using rule 128 (literal -> LIT_BOOL .)
    AND             reduce using rule 128 (literal -> LIT_BOOL .)
    OR              reduce using rule 128 (literal -> LIT_BOOL .)
    RIGHTSHIFT      reduce using rule 128 (literal -> LIT_BOOL .)
    LEFTSHIFT       reduce using rule 128 (literal -> LIT_BOOL .)
    SEMI            reduce using rule 128 (literal -> LIT_BOOL .)
    ASSIGN          reduce using rule 128 (literal -> LIT_BOOL .)
    )               reduce using rule 128 (literal -> LIT_BOOL .)
    ]               reduce using rule 128 (literal -> LIT_BOOL .)
    ,               reduce using rule 128 (literal -> LIT_BOOL .)


state 166

    (123) aexpr -> IS_VALID . ( var )

    (               shift and go to state 233


state 167

    (82) statement -> CHECK_STOP_SLOTS . ( var , STRING , STRING ) SEMI

    (               shift and go to state 234


state 168

    (120) expr -> NOT . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 235
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 169

    (69) statements -> { } .

    PROTOCOL        reduce using rule 69 (statements -> { } .)
    INCLUDE         reduce using rule 69 (statements -> { } .)
    MACHINE         reduce using rule 69 (statements -> { } .)
    ACTION          reduce using rule 69 (statements -> { } .)
    IN_PORT         reduce using rule 69 (statements -> { } .)
    OUT_PORT        reduce using rule 69 (statements -> { } .)
    TRANS           reduce using rule 69 (statements -> { } .)
    EXTERN_TYPE     reduce using rule 69 (statements -> { } .)
    GLOBAL          reduce using rule 69 (statements -> { } .)
    STRUCT          reduce using rule 69 (statements -> { } .)
    ENUM            reduce using rule 69 (statements -> { } .)
    STATE_DECL      reduce using rule 69 (statements -> { } .)
    VOID            reduce using rule 69 (statements -> { } .)
    IDENT           reduce using rule 69 (statements -> { } .)
    $end            reduce using rule 69 (statements -> { } .)
    }               reduce using rule 69 (statements -> { } .)
    ELSE            reduce using rule 69 (statements -> { } .)
    ENQUEUE         reduce using rule 69 (statements -> { } .)
    STALL_AND_WAIT  reduce using rule 69 (statements -> { } .)
    PEEK            reduce using rule 69 (statements -> { } .)
    COPY_HEAD       reduce using rule 69 (statements -> { } .)
    CHECK_ALLOCATE  reduce using rule 69 (statements -> { } .)
    CHECK_STOP_SLOTS reduce using rule 69 (statements -> { } .)
    RETURN          reduce using rule 69 (statements -> { } .)
    NOT             reduce using rule 69 (statements -> { } .)
    DASH            reduce using rule 69 (statements -> { } .)
    IF              reduce using rule 69 (statements -> { } .)
    STATIC_CAST     reduce using rule 69 (statements -> { } .)
    NEW             reduce using rule 69 (statements -> { } .)
    OOD             reduce using rule 69 (statements -> { } .)
    THIS            reduce using rule 69 (statements -> { } .)
    CHIP            reduce using rule 69 (statements -> { } .)
    (               reduce using rule 69 (statements -> { } .)
    IS_VALID        reduce using rule 69 (statements -> { } .)
    IS_INVALID      reduce using rule 69 (statements -> { } .)
    STRING          reduce using rule 69 (statements -> { } .)
    NUMBER          reduce using rule 69 (statements -> { } .)
    FLOATNUMBER     reduce using rule 69 (statements -> { } .)
    LIT_BOOL        reduce using rule 69 (statements -> { } .)


state 170

    (23) decl -> type ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    MACHINE         reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    ACTION          reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    TRANS           reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    STRUCT          reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    ENUM            reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    VOID            reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    IDENT           reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    $end            reduce using rule 23 (decl -> type ident ( params ) pairs statements .)
    }               reduce using rule 23 (decl -> type ident ( params ) pairs statements .)


state 171

    (21) decl -> type ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    VOID            reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    $end            reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)
    }               reduce using rule 21 (decl -> type ident ( params ) pairs SEMI .)


state 172

    (52) param -> type ident = STRING .

    ,               reduce using rule 52 (param -> type ident = STRING .)
    )               reduce using rule 52 (param -> type ident = STRING .)
    {               reduce using rule 52 (param -> type ident = STRING .)


state 173

    (50) param -> type ident = NUMBER .

    ,               reduce using rule 50 (param -> type ident = NUMBER .)
    )               reduce using rule 50 (param -> type ident = NUMBER .)
    {               reduce using rule 50 (param -> type ident = NUMBER .)


state 174

    (51) param -> type ident = LIT_BOOL .

    ,               reduce using rule 51 (param -> type ident = LIT_BOOL .)
    )               reduce using rule 51 (param -> type ident = LIT_BOOL .)
    {               reduce using rule 51 (param -> type ident = LIT_BOOL .)


state 175

    (49) param -> type STAR ident = . STRING

    STRING          shift and go to state 236


state 176

    (22) decl -> void ident ( params ) pairs statements .

    PROTOCOL        reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    INCLUDE         reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    MACHINE         reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    ACTION          reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    IN_PORT         reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    OUT_PORT        reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    TRANS           reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    EXTERN_TYPE     reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    GLOBAL          reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    STRUCT          reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    ENUM            reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    STATE_DECL      reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    VOID            reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    IDENT           reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    $end            reduce using rule 22 (decl -> void ident ( params ) pairs statements .)
    }               reduce using rule 22 (decl -> void ident ( params ) pairs statements .)


state 177

    (20) decl -> void ident ( params ) pairs SEMI .

    PROTOCOL        reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    INCLUDE         reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    MACHINE         reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    ACTION          reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    IN_PORT         reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    OUT_PORT        reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    TRANS           reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    EXTERN_TYPE     reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    GLOBAL          reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    STRUCT          reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    ENUM            reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    STATE_DECL      reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    VOID            reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    IDENT           reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    $end            reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)
    }               reduce using rule 20 (decl -> void ident ( params ) pairs SEMI .)


state 178

    (31) type_enum -> ident . pairs SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 237
    empty                          shift and go to state 49

state 179

    (17) decl -> ENUM ( type pairs ) { type_enums . }

    }               shift and go to state 238


state 180

    (29) type_enums -> type_enum . type_enums
    (29) type_enums -> . type_enum type_enums
    (30) type_enums -> . empty
    (31) type_enum -> . ident pairs SEMI
    (2) empty -> .
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    type_enum                      shift and go to state 180
    ident                          shift and go to state 178
    empty                          shift and go to state 181
    type_enums                     shift and go to state 239

state 181

    (30) type_enums -> empty .

    }               reduce using rule 30 (type_enums -> empty .)


state 182

    (8) decl -> MACHINE ( ident pairs ) : params . { decls }

    {               shift and go to state 240


state 183

    (16) decl -> STRUCT ( type pairs ) { type_members . }

    }               shift and go to state 241


state 184

    (34) type_state -> ident . , enumeration pairs SEMI

    ,               shift and go to state 242


state 185

    (18) decl -> STATE_DECL ( type pairs ) { type_states . }

    }               shift and go to state 243


state 186

    (32) type_states -> type_state . type_states
    (32) type_states -> . type_state type_states
    (33) type_states -> . empty
    (34) type_state -> . ident , enumeration pairs SEMI
    (2) empty -> .
    (59) ident -> . IDENT

    }               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 184
    type_states                    shift and go to state 244
    type_state                     shift and go to state 186
    empty                          shift and go to state 187

state 187

    (33) type_states -> empty .

    }               reduce using rule 33 (type_states -> empty .)


state 188

    (10) decl -> IN_PORT ( ident , type , var . pairs ) statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 245
    empty                          shift and go to state 49

state 189

    (15) decl -> GLOBAL ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ACTION          reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    TRANS           reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    ENUM            reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    VOID            reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    IDENT           reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    $end            reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)
    }               reduce using rule 15 (decl -> GLOBAL ( type pairs ) { type_members } .)


state 190

    (26) type_member -> type_or_void ident . ( types ) pairs SEMI
    (27) type_member -> type_or_void ident . pairs SEMI
    (28) type_member -> type_or_void ident . ASSIGN expr SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    (               shift and go to state 247
    ASSIGN          shift and go to state 248
    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 246
    empty                          shift and go to state 49

state 191

    (24) type_members -> type_member type_members .

    }               reduce using rule 24 (type_members -> type_member type_members .)


state 192

    (13) decl -> TRANS ( idents , idents pairs ) idents .

    PROTOCOL        reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    INCLUDE         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    MACHINE         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    ACTION          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    IN_PORT         reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    OUT_PORT        reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    TRANS           reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    EXTERN_TYPE     reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    GLOBAL          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    STRUCT          reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    ENUM            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    STATE_DECL      reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    VOID            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    IDENT           reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    $end            reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)
    }               reduce using rule 13 (decl -> TRANS ( idents , idents pairs ) idents .)


state 193

    (12) decl -> TRANS ( idents , idents , ident pairs . ) idents

    )               shift and go to state 249


state 194

    (11) decl -> OUT_PORT ( ident , type , var pairs . ) SEMI

    )               shift and go to state 250


state 195

    (79) statement -> PEEK ( . var , type pairs ) statements
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 251
    ident                          shift and go to state 135

state 196

    (85) statement -> RETURN expr . SEMI
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 252
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 197

    (99) aexpr -> CHIP [ . expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ . expr ] DOT var [ expr ] DOT var DOT field
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 253
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 198

    (68) statements -> { statements_inner } .

    PROTOCOL        reduce using rule 68 (statements -> { statements_inner } .)
    INCLUDE         reduce using rule 68 (statements -> { statements_inner } .)
    MACHINE         reduce using rule 68 (statements -> { statements_inner } .)
    ACTION          reduce using rule 68 (statements -> { statements_inner } .)
    IN_PORT         reduce using rule 68 (statements -> { statements_inner } .)
    OUT_PORT        reduce using rule 68 (statements -> { statements_inner } .)
    TRANS           reduce using rule 68 (statements -> { statements_inner } .)
    EXTERN_TYPE     reduce using rule 68 (statements -> { statements_inner } .)
    GLOBAL          reduce using rule 68 (statements -> { statements_inner } .)
    STRUCT          reduce using rule 68 (statements -> { statements_inner } .)
    ENUM            reduce using rule 68 (statements -> { statements_inner } .)
    STATE_DECL      reduce using rule 68 (statements -> { statements_inner } .)
    VOID            reduce using rule 68 (statements -> { statements_inner } .)
    IDENT           reduce using rule 68 (statements -> { statements_inner } .)
    $end            reduce using rule 68 (statements -> { statements_inner } .)
    }               reduce using rule 68 (statements -> { statements_inner } .)
    ELSE            reduce using rule 68 (statements -> { statements_inner } .)
    ENQUEUE         reduce using rule 68 (statements -> { statements_inner } .)
    STALL_AND_WAIT  reduce using rule 68 (statements -> { statements_inner } .)
    PEEK            reduce using rule 68 (statements -> { statements_inner } .)
    COPY_HEAD       reduce using rule 68 (statements -> { statements_inner } .)
    CHECK_ALLOCATE  reduce using rule 68 (statements -> { statements_inner } .)
    CHECK_STOP_SLOTS reduce using rule 68 (statements -> { statements_inner } .)
    RETURN          reduce using rule 68 (statements -> { statements_inner } .)
    NOT             reduce using rule 68 (statements -> { statements_inner } .)
    DASH            reduce using rule 68 (statements -> { statements_inner } .)
    IF              reduce using rule 68 (statements -> { statements_inner } .)
    STATIC_CAST     reduce using rule 68 (statements -> { statements_inner } .)
    NEW             reduce using rule 68 (statements -> { statements_inner } .)
    OOD             reduce using rule 68 (statements -> { statements_inner } .)
    THIS            reduce using rule 68 (statements -> { statements_inner } .)
    CHIP            reduce using rule 68 (statements -> { statements_inner } .)
    (               reduce using rule 68 (statements -> { statements_inner } .)
    IS_VALID        reduce using rule 68 (statements -> { statements_inner } .)
    IS_INVALID      reduce using rule 68 (statements -> { statements_inner } .)
    STRING          reduce using rule 68 (statements -> { statements_inner } .)
    NUMBER          reduce using rule 68 (statements -> { statements_inner } .)
    FLOATNUMBER     reduce using rule 68 (statements -> { statements_inner } .)
    LIT_BOOL        reduce using rule 68 (statements -> { statements_inner } .)


state 199

    (95) aexpr -> NEW type .

    DOT             reduce using rule 95 (aexpr -> NEW type .)
    [               reduce using rule 95 (aexpr -> NEW type .)
    )               reduce using rule 95 (aexpr -> NEW type .)
    STAR            reduce using rule 95 (aexpr -> NEW type .)
    SLASH           reduce using rule 95 (aexpr -> NEW type .)
    PLUS            reduce using rule 95 (aexpr -> NEW type .)
    DASH            reduce using rule 95 (aexpr -> NEW type .)
    LT              reduce using rule 95 (aexpr -> NEW type .)
    GT              reduce using rule 95 (aexpr -> NEW type .)
    LE              reduce using rule 95 (aexpr -> NEW type .)
    GE              reduce using rule 95 (aexpr -> NEW type .)
    EQ              reduce using rule 95 (aexpr -> NEW type .)
    NE              reduce using rule 95 (aexpr -> NEW type .)
    AND             reduce using rule 95 (aexpr -> NEW type .)
    OR              reduce using rule 95 (aexpr -> NEW type .)
    RIGHTSHIFT      reduce using rule 95 (aexpr -> NEW type .)
    LEFTSHIFT       reduce using rule 95 (aexpr -> NEW type .)
    SEMI            reduce using rule 95 (aexpr -> NEW type .)
    ,               reduce using rule 95 (aexpr -> NEW type .)
    ]               reduce using rule 95 (aexpr -> NEW type .)
    ASSIGN          reduce using rule 95 (aexpr -> NEW type .)


state 200

    (103) aexpr -> aexpr [ . exprs ]
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    ]               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 256
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 201

    (101) aexpr -> aexpr DOT . ident
    (102) aexpr -> aexpr DOT . ident ( exprs )
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 257

state 202

    (83) aexpr -> STATIC_CAST ( . type , expr )
    (84) aexpr -> STATIC_CAST ( . type , STRING , expr )
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    type                           shift and go to state 258

state 203

    (81) statement -> CHECK_ALLOCATE ( . var ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 259
    ident                          shift and go to state 135

state 204

    (122) aexpr -> ( expr . )
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 260
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 205

    (124) aexpr -> IS_INVALID ( . var )
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 261
    ident                          shift and go to state 135

state 206

    (77) statement -> ENQUEUE ( . var , type pairs ) statements
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 262
    ident                          shift and go to state 135

state 207

    (80) statement -> COPY_HEAD ( . var , var pairs ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 263
    ident                          shift and go to state 135

state 208

    (70) statements_inner -> statement statements_inner .

    }               reduce using rule 70 (statements_inner -> statement statements_inner .)


state 209

    (91) aexpr -> type ident .

    DOT             reduce using rule 91 (aexpr -> type ident .)
    [               reduce using rule 91 (aexpr -> type ident .)
    )               reduce using rule 91 (aexpr -> type ident .)
    STAR            reduce using rule 91 (aexpr -> type ident .)
    SLASH           reduce using rule 91 (aexpr -> type ident .)
    PLUS            reduce using rule 91 (aexpr -> type ident .)
    DASH            reduce using rule 91 (aexpr -> type ident .)
    LT              reduce using rule 91 (aexpr -> type ident .)
    GT              reduce using rule 91 (aexpr -> type ident .)
    LE              reduce using rule 91 (aexpr -> type ident .)
    GE              reduce using rule 91 (aexpr -> type ident .)
    EQ              reduce using rule 91 (aexpr -> type ident .)
    NE              reduce using rule 91 (aexpr -> type ident .)
    AND             reduce using rule 91 (aexpr -> type ident .)
    OR              reduce using rule 91 (aexpr -> type ident .)
    RIGHTSHIFT      reduce using rule 91 (aexpr -> type ident .)
    LEFTSHIFT       reduce using rule 91 (aexpr -> type ident .)
    SEMI            reduce using rule 91 (aexpr -> type ident .)
    ,               reduce using rule 91 (aexpr -> type ident .)
    ]               reduce using rule 91 (aexpr -> type ident .)
    ASSIGN          reduce using rule 91 (aexpr -> type ident .)


state 210

    (104) aexpr -> type DOUBLE_COLON . ident ( exprs )
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 264

state 211

    (78) statement -> STALL_AND_WAIT ( . var , var ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 265
    ident                          shift and go to state 135

state 212

    (121) expr -> DASH expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 121 (expr -> DASH expr .)
    SLASH           reduce using rule 121 (expr -> DASH expr .)
    PLUS            reduce using rule 121 (expr -> DASH expr .)
    DASH            reduce using rule 121 (expr -> DASH expr .)
    LT              reduce using rule 121 (expr -> DASH expr .)
    GT              reduce using rule 121 (expr -> DASH expr .)
    LE              reduce using rule 121 (expr -> DASH expr .)
    GE              reduce using rule 121 (expr -> DASH expr .)
    EQ              reduce using rule 121 (expr -> DASH expr .)
    NE              reduce using rule 121 (expr -> DASH expr .)
    AND             reduce using rule 121 (expr -> DASH expr .)
    OR              reduce using rule 121 (expr -> DASH expr .)
    RIGHTSHIFT      reduce using rule 121 (expr -> DASH expr .)
    LEFTSHIFT       reduce using rule 121 (expr -> DASH expr .)
    SEMI            reduce using rule 121 (expr -> DASH expr .)
    ASSIGN          reduce using rule 121 (expr -> DASH expr .)
    )               reduce using rule 121 (expr -> DASH expr .)
    ]               reduce using rule 121 (expr -> DASH expr .)
    ,               reduce using rule 121 (expr -> DASH expr .)

  ! STAR            [ shift and go to state 220 ]
  ! SLASH           [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 213

    (87) if_statement -> IF ( . expr ) statements
    (88) if_statement -> IF ( . expr ) statements ELSE statements
    (89) if_statement -> IF ( . expr ) statements ELSE if_statement
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 266
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 214

    (94) aexpr -> ident ( . exprs )
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 267
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 215

    (129) enumeration -> ident : . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 268

state 216

    (97) aexpr -> THIS DOT . var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> THIS DOT . var [ expr ] DOT var DOT field
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 269
    ident                          shift and go to state 135

state 217

    (116) expr -> expr AND . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 270
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 218

    (119) expr -> expr LEFTSHIFT . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 271
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 219

    (111) expr -> expr GT . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 272
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 220

    (106) expr -> expr STAR . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 273
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 221

    (75) statement -> expr SEMI .

    ENQUEUE         reduce using rule 75 (statement -> expr SEMI .)
    STALL_AND_WAIT  reduce using rule 75 (statement -> expr SEMI .)
    PEEK            reduce using rule 75 (statement -> expr SEMI .)
    COPY_HEAD       reduce using rule 75 (statement -> expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 75 (statement -> expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 75 (statement -> expr SEMI .)
    RETURN          reduce using rule 75 (statement -> expr SEMI .)
    NOT             reduce using rule 75 (statement -> expr SEMI .)
    DASH            reduce using rule 75 (statement -> expr SEMI .)
    IF              reduce using rule 75 (statement -> expr SEMI .)
    STATIC_CAST     reduce using rule 75 (statement -> expr SEMI .)
    NEW             reduce using rule 75 (statement -> expr SEMI .)
    OOD             reduce using rule 75 (statement -> expr SEMI .)
    THIS            reduce using rule 75 (statement -> expr SEMI .)
    CHIP            reduce using rule 75 (statement -> expr SEMI .)
    (               reduce using rule 75 (statement -> expr SEMI .)
    IS_VALID        reduce using rule 75 (statement -> expr SEMI .)
    IS_INVALID      reduce using rule 75 (statement -> expr SEMI .)
    STRING          reduce using rule 75 (statement -> expr SEMI .)
    NUMBER          reduce using rule 75 (statement -> expr SEMI .)
    FLOATNUMBER     reduce using rule 75 (statement -> expr SEMI .)
    LIT_BOOL        reduce using rule 75 (statement -> expr SEMI .)
    IDENT           reduce using rule 75 (statement -> expr SEMI .)
    }               reduce using rule 75 (statement -> expr SEMI .)


state 222

    (113) expr -> expr GE . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 274
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 223

    (115) expr -> expr NE . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 275
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 224

    (109) expr -> expr DASH . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 276
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 225

    (110) expr -> expr LT . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 277
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 226

    (112) expr -> expr LE . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 278
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 227

    (108) expr -> expr PLUS . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 279
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 228

    (107) expr -> expr SLASH . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 280
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 229

    (118) expr -> expr RIGHTSHIFT . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 281
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 230

    (114) expr -> expr EQ . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 282
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 231

    (76) statement -> expr ASSIGN . expr SEMI
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 283
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 232

    (117) expr -> expr OR . expr
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 284
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 233

    (123) aexpr -> IS_VALID ( . var )
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 285
    ident                          shift and go to state 135

state 234

    (82) statement -> CHECK_STOP_SLOTS ( . var , STRING , STRING ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 286
    ident                          shift and go to state 135

state 235

    (120) expr -> NOT expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 120 (expr -> NOT expr .)
    SLASH           reduce using rule 120 (expr -> NOT expr .)
    PLUS            reduce using rule 120 (expr -> NOT expr .)
    DASH            reduce using rule 120 (expr -> NOT expr .)
    LT              reduce using rule 120 (expr -> NOT expr .)
    GT              reduce using rule 120 (expr -> NOT expr .)
    LE              reduce using rule 120 (expr -> NOT expr .)
    GE              reduce using rule 120 (expr -> NOT expr .)
    EQ              reduce using rule 120 (expr -> NOT expr .)
    NE              reduce using rule 120 (expr -> NOT expr .)
    AND             reduce using rule 120 (expr -> NOT expr .)
    OR              reduce using rule 120 (expr -> NOT expr .)
    RIGHTSHIFT      reduce using rule 120 (expr -> NOT expr .)
    LEFTSHIFT       reduce using rule 120 (expr -> NOT expr .)
    SEMI            reduce using rule 120 (expr -> NOT expr .)
    ASSIGN          reduce using rule 120 (expr -> NOT expr .)
    )               reduce using rule 120 (expr -> NOT expr .)
    ]               reduce using rule 120 (expr -> NOT expr .)
    ,               reduce using rule 120 (expr -> NOT expr .)

  ! STAR            [ shift and go to state 220 ]
  ! SLASH           [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 236

    (49) param -> type STAR ident = STRING .

    ,               reduce using rule 49 (param -> type STAR ident = STRING .)
    )               reduce using rule 49 (param -> type STAR ident = STRING .)
    {               reduce using rule 49 (param -> type STAR ident = STRING .)


state 237

    (31) type_enum -> ident pairs . SEMI

    SEMI            shift and go to state 287


state 238

    (17) decl -> ENUM ( type pairs ) { type_enums } .

    PROTOCOL        reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    INCLUDE         reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    MACHINE         reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    ACTION          reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    IN_PORT         reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    OUT_PORT        reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    TRANS           reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    EXTERN_TYPE     reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    GLOBAL          reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    STRUCT          reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    ENUM            reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    STATE_DECL      reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    VOID            reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    IDENT           reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    $end            reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)
    }               reduce using rule 17 (decl -> ENUM ( type pairs ) { type_enums } .)


state 239

    (29) type_enums -> type_enum type_enums .

    }               reduce using rule 29 (type_enums -> type_enum type_enums .)


state 240

    (8) decl -> MACHINE ( ident pairs ) : params { . decls }
    (3) decls -> . declsx
    (4) declsx -> . decl declsx
    (5) declsx -> . empty
    (6) decl -> . PROTOCOL STRING SEMI
    (7) decl -> . INCLUDE STRING SEMI
    (8) decl -> . MACHINE ( ident pairs ) : params { decls }
    (9) decl -> . ACTION ( ident pairs ) statements
    (10) decl -> . IN_PORT ( ident , type , var pairs ) statements
    (11) decl -> . OUT_PORT ( ident , type , var pairs ) SEMI
    (12) decl -> . TRANS ( idents , idents , ident pairs ) idents
    (13) decl -> . TRANS ( idents , idents pairs ) idents
    (14) decl -> . EXTERN_TYPE ( type pairs ) SEMI
    (15) decl -> . GLOBAL ( type pairs ) { type_members }
    (16) decl -> . STRUCT ( type pairs ) { type_members }
    (17) decl -> . ENUM ( type pairs ) { type_enums }
    (18) decl -> . STATE_DECL ( type pairs ) { type_states }
    (19) decl -> . type ident pairs SEMI
    (20) decl -> . void ident ( params ) pairs SEMI
    (21) decl -> . type ident ( params ) pairs SEMI
    (22) decl -> . void ident ( params ) pairs statements
    (23) decl -> . type ident ( params ) pairs statements
    (2) empty -> .
    (40) type -> . typestr
    (41) void -> . VOID
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    PROTOCOL        shift and go to state 12
    INCLUDE         shift and go to state 18
    MACHINE         shift and go to state 15
    ACTION          shift and go to state 8
    IN_PORT         shift and go to state 23
    OUT_PORT        shift and go to state 7
    TRANS           shift and go to state 6
    EXTERN_TYPE     shift and go to state 16
    GLOBAL          shift and go to state 3
    STRUCT          shift and go to state 20
    ENUM            shift and go to state 14
    STATE_DECL      shift and go to state 21
    }               reduce using rule 2 (empty -> .)
    VOID            shift and go to state 2
    IDENT           shift and go to state 4

    decl                           shift and go to state 1
    ident                          shift and go to state 19
    void                           shift and go to state 13
    declsx                         shift and go to state 11
    decls                          shift and go to state 288
    type                           shift and go to state 9
    typestr                        shift and go to state 17
    empty                          shift and go to state 10

state 241

    (16) decl -> STRUCT ( type pairs ) { type_members } .

    PROTOCOL        reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    INCLUDE         reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    MACHINE         reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    ACTION          reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    IN_PORT         reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    OUT_PORT        reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    TRANS           reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    EXTERN_TYPE     reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    GLOBAL          reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    STRUCT          reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    ENUM            reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    STATE_DECL      reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    VOID            reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    IDENT           reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    $end            reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)
    }               reduce using rule 16 (decl -> STRUCT ( type pairs ) { type_members } .)


state 242

    (34) type_state -> ident , . enumeration pairs SEMI
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 289
    enumeration                    shift and go to state 290

state 243

    (18) decl -> STATE_DECL ( type pairs ) { type_states } .

    PROTOCOL        reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    INCLUDE         reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    MACHINE         reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ACTION          reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IN_PORT         reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    OUT_PORT        reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    TRANS           reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    EXTERN_TYPE     reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    GLOBAL          reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STRUCT          reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    ENUM            reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    STATE_DECL      reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    VOID            reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    IDENT           reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    $end            reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)
    }               reduce using rule 18 (decl -> STATE_DECL ( type pairs ) { type_states } .)


state 244

    (32) type_states -> type_state type_states .

    }               reduce using rule 32 (type_states -> type_state type_states .)


state 245

    (10) decl -> IN_PORT ( ident , type , var pairs . ) statements

    )               shift and go to state 291


state 246

    (27) type_member -> type_or_void ident pairs . SEMI

    SEMI            shift and go to state 292


state 247

    (26) type_member -> type_or_void ident ( . types ) pairs SEMI
    (35) types -> . type , types
    (36) types -> . type
    (37) types -> . empty
    (40) type -> . typestr
    (2) empty -> .
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    types                          shift and go to state 295
    typestr                        shift and go to state 17
    type                           shift and go to state 294
    empty                          shift and go to state 293

state 248

    (28) type_member -> type_or_void ident ASSIGN . expr SEMI
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 296
    enumeration                    shift and go to state 149
    aexpr                          shift and go to state 144
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155

state 249

    (12) decl -> TRANS ( idents , idents , ident pairs ) . idents
    (53) idents -> . { identx }
    (54) idents -> . ident
    (59) ident -> . IDENT

    {               shift and go to state 43
    IDENT           shift and go to state 4

    ident                          shift and go to state 41
    idents                         shift and go to state 297

state 250

    (11) decl -> OUT_PORT ( ident , type , var pairs ) . SEMI

    SEMI            shift and go to state 298


state 251

    (79) statement -> PEEK ( var . , type pairs ) statements

    ,               shift and go to state 299


state 252

    (85) statement -> RETURN expr SEMI .

    ENQUEUE         reduce using rule 85 (statement -> RETURN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 85 (statement -> RETURN expr SEMI .)
    PEEK            reduce using rule 85 (statement -> RETURN expr SEMI .)
    COPY_HEAD       reduce using rule 85 (statement -> RETURN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 85 (statement -> RETURN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 85 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 85 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 85 (statement -> RETURN expr SEMI .)
    DASH            reduce using rule 85 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 85 (statement -> RETURN expr SEMI .)
    STATIC_CAST     reduce using rule 85 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 85 (statement -> RETURN expr SEMI .)
    OOD             reduce using rule 85 (statement -> RETURN expr SEMI .)
    THIS            reduce using rule 85 (statement -> RETURN expr SEMI .)
    CHIP            reduce using rule 85 (statement -> RETURN expr SEMI .)
    (               reduce using rule 85 (statement -> RETURN expr SEMI .)
    IS_VALID        reduce using rule 85 (statement -> RETURN expr SEMI .)
    IS_INVALID      reduce using rule 85 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 85 (statement -> RETURN expr SEMI .)
    NUMBER          reduce using rule 85 (statement -> RETURN expr SEMI .)
    FLOATNUMBER     reduce using rule 85 (statement -> RETURN expr SEMI .)
    LIT_BOOL        reduce using rule 85 (statement -> RETURN expr SEMI .)
    IDENT           reduce using rule 85 (statement -> RETURN expr SEMI .)
    }               reduce using rule 85 (statement -> RETURN expr SEMI .)


state 253

    (99) aexpr -> CHIP [ expr . ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr . ] DOT var [ expr ] DOT var DOT field
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    ]               shift and go to state 300
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 254

    (74) exprs -> empty .

    )               reduce using rule 74 (exprs -> empty .)
    ]               reduce using rule 74 (exprs -> empty .)


state 255

    (72) exprs -> expr . , exprs
    (73) exprs -> expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    ,               shift and go to state 301
    )               reduce using rule 73 (exprs -> expr .)
    ]               reduce using rule 73 (exprs -> expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 256

    (103) aexpr -> aexpr [ exprs . ]

    ]               shift and go to state 302


state 257

    (101) aexpr -> aexpr DOT ident .
    (102) aexpr -> aexpr DOT ident . ( exprs )

    DOT             reduce using rule 101 (aexpr -> aexpr DOT ident .)
    [               reduce using rule 101 (aexpr -> aexpr DOT ident .)
    )               reduce using rule 101 (aexpr -> aexpr DOT ident .)
    STAR            reduce using rule 101 (aexpr -> aexpr DOT ident .)
    SLASH           reduce using rule 101 (aexpr -> aexpr DOT ident .)
    PLUS            reduce using rule 101 (aexpr -> aexpr DOT ident .)
    DASH            reduce using rule 101 (aexpr -> aexpr DOT ident .)
    LT              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    GT              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    LE              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    GE              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    EQ              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    NE              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    AND             reduce using rule 101 (aexpr -> aexpr DOT ident .)
    OR              reduce using rule 101 (aexpr -> aexpr DOT ident .)
    RIGHTSHIFT      reduce using rule 101 (aexpr -> aexpr DOT ident .)
    LEFTSHIFT       reduce using rule 101 (aexpr -> aexpr DOT ident .)
    SEMI            reduce using rule 101 (aexpr -> aexpr DOT ident .)
    ,               reduce using rule 101 (aexpr -> aexpr DOT ident .)
    ]               reduce using rule 101 (aexpr -> aexpr DOT ident .)
    ASSIGN          reduce using rule 101 (aexpr -> aexpr DOT ident .)
    (               shift and go to state 303


state 258

    (83) aexpr -> STATIC_CAST ( type . , expr )
    (84) aexpr -> STATIC_CAST ( type . , STRING , expr )

    ,               shift and go to state 304


state 259

    (81) statement -> CHECK_ALLOCATE ( var . ) SEMI

    )               shift and go to state 305


state 260

    (122) aexpr -> ( expr ) .

    DOT             reduce using rule 122 (aexpr -> ( expr ) .)
    [               reduce using rule 122 (aexpr -> ( expr ) .)
    )               reduce using rule 122 (aexpr -> ( expr ) .)
    STAR            reduce using rule 122 (aexpr -> ( expr ) .)
    SLASH           reduce using rule 122 (aexpr -> ( expr ) .)
    PLUS            reduce using rule 122 (aexpr -> ( expr ) .)
    DASH            reduce using rule 122 (aexpr -> ( expr ) .)
    LT              reduce using rule 122 (aexpr -> ( expr ) .)
    GT              reduce using rule 122 (aexpr -> ( expr ) .)
    LE              reduce using rule 122 (aexpr -> ( expr ) .)
    GE              reduce using rule 122 (aexpr -> ( expr ) .)
    EQ              reduce using rule 122 (aexpr -> ( expr ) .)
    NE              reduce using rule 122 (aexpr -> ( expr ) .)
    AND             reduce using rule 122 (aexpr -> ( expr ) .)
    OR              reduce using rule 122 (aexpr -> ( expr ) .)
    RIGHTSHIFT      reduce using rule 122 (aexpr -> ( expr ) .)
    LEFTSHIFT       reduce using rule 122 (aexpr -> ( expr ) .)
    SEMI            reduce using rule 122 (aexpr -> ( expr ) .)
    ,               reduce using rule 122 (aexpr -> ( expr ) .)
    ]               reduce using rule 122 (aexpr -> ( expr ) .)
    ASSIGN          reduce using rule 122 (aexpr -> ( expr ) .)


state 261

    (124) aexpr -> IS_INVALID ( var . )

    )               shift and go to state 306


state 262

    (77) statement -> ENQUEUE ( var . , type pairs ) statements

    ,               shift and go to state 307


state 263

    (80) statement -> COPY_HEAD ( var . , var pairs ) SEMI

    ,               shift and go to state 308


state 264

    (104) aexpr -> type DOUBLE_COLON ident . ( exprs )

    (               shift and go to state 309


state 265

    (78) statement -> STALL_AND_WAIT ( var . , var ) SEMI

    ,               shift and go to state 310


state 266

    (87) if_statement -> IF ( expr . ) statements
    (88) if_statement -> IF ( expr . ) statements ELSE statements
    (89) if_statement -> IF ( expr . ) statements ELSE if_statement
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 311
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 267

    (94) aexpr -> ident ( exprs . )

    )               shift and go to state 312


state 268

    (129) enumeration -> ident : ident .

    DOT             reduce using rule 129 (enumeration -> ident : ident .)
    [               reduce using rule 129 (enumeration -> ident : ident .)
    STAR            reduce using rule 129 (enumeration -> ident : ident .)
    SLASH           reduce using rule 129 (enumeration -> ident : ident .)
    PLUS            reduce using rule 129 (enumeration -> ident : ident .)
    DASH            reduce using rule 129 (enumeration -> ident : ident .)
    LT              reduce using rule 129 (enumeration -> ident : ident .)
    GT              reduce using rule 129 (enumeration -> ident : ident .)
    LE              reduce using rule 129 (enumeration -> ident : ident .)
    GE              reduce using rule 129 (enumeration -> ident : ident .)
    EQ              reduce using rule 129 (enumeration -> ident : ident .)
    NE              reduce using rule 129 (enumeration -> ident : ident .)
    AND             reduce using rule 129 (enumeration -> ident : ident .)
    OR              reduce using rule 129 (enumeration -> ident : ident .)
    RIGHTSHIFT      reduce using rule 129 (enumeration -> ident : ident .)
    LEFTSHIFT       reduce using rule 129 (enumeration -> ident : ident .)
    SEMI            reduce using rule 129 (enumeration -> ident : ident .)
    ASSIGN          reduce using rule 129 (enumeration -> ident : ident .)
    )               reduce using rule 129 (enumeration -> ident : ident .)
    ]               reduce using rule 129 (enumeration -> ident : ident .)
    ,               reduce using rule 129 (enumeration -> ident : ident .)


state 269

    (97) aexpr -> THIS DOT var . [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> THIS DOT var . [ expr ] DOT var DOT field

    [               shift and go to state 313


state 270

    (116) expr -> expr AND expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    AND             reduce using rule 116 (expr -> expr AND expr .)
    OR              reduce using rule 116 (expr -> expr AND expr .)
    SEMI            reduce using rule 116 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 116 (expr -> expr AND expr .)
    )               reduce using rule 116 (expr -> expr AND expr .)
    ]               reduce using rule 116 (expr -> expr AND expr .)
    ,               reduce using rule 116 (expr -> expr AND expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! SLASH           [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! DASH            [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! LEFTSHIFT       [ reduce using rule 116 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 271

    (119) expr -> expr LEFTSHIFT expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    GT              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    LE              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    GE              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    EQ              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    NE              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    AND             reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    OR              reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    LEFTSHIFT       reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    SEMI            reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    ASSIGN          reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    )               reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    ]               reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    ,               reduce using rule 119 (expr -> expr LEFTSHIFT expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224

  ! STAR            [ reduce using rule 119 (expr -> expr LEFTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 119 (expr -> expr LEFTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 119 (expr -> expr LEFTSHIFT expr .) ]
  ! DASH            [ reduce using rule 119 (expr -> expr LEFTSHIFT expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 272

    (111) expr -> expr GT expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 111 (expr -> expr GT expr .)
    GT              reduce using rule 111 (expr -> expr GT expr .)
    LE              reduce using rule 111 (expr -> expr GT expr .)
    GE              reduce using rule 111 (expr -> expr GT expr .)
    EQ              reduce using rule 111 (expr -> expr GT expr .)
    NE              reduce using rule 111 (expr -> expr GT expr .)
    AND             reduce using rule 111 (expr -> expr GT expr .)
    OR              reduce using rule 111 (expr -> expr GT expr .)
    SEMI            reduce using rule 111 (expr -> expr GT expr .)
    ASSIGN          reduce using rule 111 (expr -> expr GT expr .)
    )               reduce using rule 111 (expr -> expr GT expr .)
    ]               reduce using rule 111 (expr -> expr GT expr .)
    ,               reduce using rule 111 (expr -> expr GT expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! SLASH           [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! DASH            [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 273

    (106) expr -> expr STAR expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 106 (expr -> expr STAR expr .)
    SLASH           reduce using rule 106 (expr -> expr STAR expr .)
    PLUS            reduce using rule 106 (expr -> expr STAR expr .)
    DASH            reduce using rule 106 (expr -> expr STAR expr .)
    LT              reduce using rule 106 (expr -> expr STAR expr .)
    GT              reduce using rule 106 (expr -> expr STAR expr .)
    LE              reduce using rule 106 (expr -> expr STAR expr .)
    GE              reduce using rule 106 (expr -> expr STAR expr .)
    EQ              reduce using rule 106 (expr -> expr STAR expr .)
    NE              reduce using rule 106 (expr -> expr STAR expr .)
    AND             reduce using rule 106 (expr -> expr STAR expr .)
    OR              reduce using rule 106 (expr -> expr STAR expr .)
    RIGHTSHIFT      reduce using rule 106 (expr -> expr STAR expr .)
    LEFTSHIFT       reduce using rule 106 (expr -> expr STAR expr .)
    SEMI            reduce using rule 106 (expr -> expr STAR expr .)
    ASSIGN          reduce using rule 106 (expr -> expr STAR expr .)
    )               reduce using rule 106 (expr -> expr STAR expr .)
    ]               reduce using rule 106 (expr -> expr STAR expr .)
    ,               reduce using rule 106 (expr -> expr STAR expr .)

  ! STAR            [ shift and go to state 220 ]
  ! SLASH           [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 274

    (113) expr -> expr GE expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 113 (expr -> expr GE expr .)
    GT              reduce using rule 113 (expr -> expr GE expr .)
    LE              reduce using rule 113 (expr -> expr GE expr .)
    GE              reduce using rule 113 (expr -> expr GE expr .)
    EQ              reduce using rule 113 (expr -> expr GE expr .)
    NE              reduce using rule 113 (expr -> expr GE expr .)
    AND             reduce using rule 113 (expr -> expr GE expr .)
    OR              reduce using rule 113 (expr -> expr GE expr .)
    SEMI            reduce using rule 113 (expr -> expr GE expr .)
    ASSIGN          reduce using rule 113 (expr -> expr GE expr .)
    )               reduce using rule 113 (expr -> expr GE expr .)
    ]               reduce using rule 113 (expr -> expr GE expr .)
    ,               reduce using rule 113 (expr -> expr GE expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! SLASH           [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! DASH            [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 275

    (115) expr -> expr NE expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    EQ              reduce using rule 115 (expr -> expr NE expr .)
    NE              reduce using rule 115 (expr -> expr NE expr .)
    AND             reduce using rule 115 (expr -> expr NE expr .)
    OR              reduce using rule 115 (expr -> expr NE expr .)
    SEMI            reduce using rule 115 (expr -> expr NE expr .)
    ASSIGN          reduce using rule 115 (expr -> expr NE expr .)
    )               reduce using rule 115 (expr -> expr NE expr .)
    ]               reduce using rule 115 (expr -> expr NE expr .)
    ,               reduce using rule 115 (expr -> expr NE expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! SLASH           [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! DASH            [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 115 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 276

    (109) expr -> expr DASH expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    PLUS            reduce using rule 109 (expr -> expr DASH expr .)
    DASH            reduce using rule 109 (expr -> expr DASH expr .)
    LT              reduce using rule 109 (expr -> expr DASH expr .)
    GT              reduce using rule 109 (expr -> expr DASH expr .)
    LE              reduce using rule 109 (expr -> expr DASH expr .)
    GE              reduce using rule 109 (expr -> expr DASH expr .)
    EQ              reduce using rule 109 (expr -> expr DASH expr .)
    NE              reduce using rule 109 (expr -> expr DASH expr .)
    AND             reduce using rule 109 (expr -> expr DASH expr .)
    OR              reduce using rule 109 (expr -> expr DASH expr .)
    RIGHTSHIFT      reduce using rule 109 (expr -> expr DASH expr .)
    LEFTSHIFT       reduce using rule 109 (expr -> expr DASH expr .)
    SEMI            reduce using rule 109 (expr -> expr DASH expr .)
    ASSIGN          reduce using rule 109 (expr -> expr DASH expr .)
    )               reduce using rule 109 (expr -> expr DASH expr .)
    ]               reduce using rule 109 (expr -> expr DASH expr .)
    ,               reduce using rule 109 (expr -> expr DASH expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228

  ! STAR            [ reduce using rule 109 (expr -> expr DASH expr .) ]
  ! SLASH           [ reduce using rule 109 (expr -> expr DASH expr .) ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 277

    (110) expr -> expr LT expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 110 (expr -> expr LT expr .)
    GT              reduce using rule 110 (expr -> expr LT expr .)
    LE              reduce using rule 110 (expr -> expr LT expr .)
    GE              reduce using rule 110 (expr -> expr LT expr .)
    EQ              reduce using rule 110 (expr -> expr LT expr .)
    NE              reduce using rule 110 (expr -> expr LT expr .)
    AND             reduce using rule 110 (expr -> expr LT expr .)
    OR              reduce using rule 110 (expr -> expr LT expr .)
    SEMI            reduce using rule 110 (expr -> expr LT expr .)
    ASSIGN          reduce using rule 110 (expr -> expr LT expr .)
    )               reduce using rule 110 (expr -> expr LT expr .)
    ]               reduce using rule 110 (expr -> expr LT expr .)
    ,               reduce using rule 110 (expr -> expr LT expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! SLASH           [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! DASH            [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! LEFTSHIFT       [ reduce using rule 110 (expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 278

    (112) expr -> expr LE expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 112 (expr -> expr LE expr .)
    GT              reduce using rule 112 (expr -> expr LE expr .)
    LE              reduce using rule 112 (expr -> expr LE expr .)
    GE              reduce using rule 112 (expr -> expr LE expr .)
    EQ              reduce using rule 112 (expr -> expr LE expr .)
    NE              reduce using rule 112 (expr -> expr LE expr .)
    AND             reduce using rule 112 (expr -> expr LE expr .)
    OR              reduce using rule 112 (expr -> expr LE expr .)
    SEMI            reduce using rule 112 (expr -> expr LE expr .)
    ASSIGN          reduce using rule 112 (expr -> expr LE expr .)
    )               reduce using rule 112 (expr -> expr LE expr .)
    ]               reduce using rule 112 (expr -> expr LE expr .)
    ,               reduce using rule 112 (expr -> expr LE expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! SLASH           [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! DASH            [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! LEFTSHIFT       [ reduce using rule 112 (expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 279

    (108) expr -> expr PLUS expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    PLUS            reduce using rule 108 (expr -> expr PLUS expr .)
    DASH            reduce using rule 108 (expr -> expr PLUS expr .)
    LT              reduce using rule 108 (expr -> expr PLUS expr .)
    GT              reduce using rule 108 (expr -> expr PLUS expr .)
    LE              reduce using rule 108 (expr -> expr PLUS expr .)
    GE              reduce using rule 108 (expr -> expr PLUS expr .)
    EQ              reduce using rule 108 (expr -> expr PLUS expr .)
    NE              reduce using rule 108 (expr -> expr PLUS expr .)
    AND             reduce using rule 108 (expr -> expr PLUS expr .)
    OR              reduce using rule 108 (expr -> expr PLUS expr .)
    RIGHTSHIFT      reduce using rule 108 (expr -> expr PLUS expr .)
    LEFTSHIFT       reduce using rule 108 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 108 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 108 (expr -> expr PLUS expr .)
    )               reduce using rule 108 (expr -> expr PLUS expr .)
    ]               reduce using rule 108 (expr -> expr PLUS expr .)
    ,               reduce using rule 108 (expr -> expr PLUS expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228

  ! STAR            [ reduce using rule 108 (expr -> expr PLUS expr .) ]
  ! SLASH           [ reduce using rule 108 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 280

    (107) expr -> expr SLASH expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    STAR            reduce using rule 107 (expr -> expr SLASH expr .)
    SLASH           reduce using rule 107 (expr -> expr SLASH expr .)
    PLUS            reduce using rule 107 (expr -> expr SLASH expr .)
    DASH            reduce using rule 107 (expr -> expr SLASH expr .)
    LT              reduce using rule 107 (expr -> expr SLASH expr .)
    GT              reduce using rule 107 (expr -> expr SLASH expr .)
    LE              reduce using rule 107 (expr -> expr SLASH expr .)
    GE              reduce using rule 107 (expr -> expr SLASH expr .)
    EQ              reduce using rule 107 (expr -> expr SLASH expr .)
    NE              reduce using rule 107 (expr -> expr SLASH expr .)
    AND             reduce using rule 107 (expr -> expr SLASH expr .)
    OR              reduce using rule 107 (expr -> expr SLASH expr .)
    RIGHTSHIFT      reduce using rule 107 (expr -> expr SLASH expr .)
    LEFTSHIFT       reduce using rule 107 (expr -> expr SLASH expr .)
    SEMI            reduce using rule 107 (expr -> expr SLASH expr .)
    ASSIGN          reduce using rule 107 (expr -> expr SLASH expr .)
    )               reduce using rule 107 (expr -> expr SLASH expr .)
    ]               reduce using rule 107 (expr -> expr SLASH expr .)
    ,               reduce using rule 107 (expr -> expr SLASH expr .)

  ! STAR            [ shift and go to state 220 ]
  ! SLASH           [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 227 ]
  ! DASH            [ shift and go to state 224 ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 281

    (118) expr -> expr RIGHTSHIFT expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    LT              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    GT              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    LE              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    GE              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    EQ              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    NE              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    AND             reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    OR              reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    RIGHTSHIFT      reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    LEFTSHIFT       reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    SEMI            reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    ASSIGN          reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    )               reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    ]               reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    ,               reduce using rule 118 (expr -> expr RIGHTSHIFT expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224

  ! STAR            [ reduce using rule 118 (expr -> expr RIGHTSHIFT expr .) ]
  ! SLASH           [ reduce using rule 118 (expr -> expr RIGHTSHIFT expr .) ]
  ! PLUS            [ reduce using rule 118 (expr -> expr RIGHTSHIFT expr .) ]
  ! DASH            [ reduce using rule 118 (expr -> expr RIGHTSHIFT expr .) ]
  ! LT              [ shift and go to state 225 ]
  ! GT              [ shift and go to state 219 ]
  ! LE              [ shift and go to state 226 ]
  ! GE              [ shift and go to state 222 ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]
  ! RIGHTSHIFT      [ shift and go to state 229 ]
  ! LEFTSHIFT       [ shift and go to state 218 ]


state 282

    (114) expr -> expr EQ expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    EQ              reduce using rule 114 (expr -> expr EQ expr .)
    NE              reduce using rule 114 (expr -> expr EQ expr .)
    AND             reduce using rule 114 (expr -> expr EQ expr .)
    OR              reduce using rule 114 (expr -> expr EQ expr .)
    SEMI            reduce using rule 114 (expr -> expr EQ expr .)
    ASSIGN          reduce using rule 114 (expr -> expr EQ expr .)
    )               reduce using rule 114 (expr -> expr EQ expr .)
    ]               reduce using rule 114 (expr -> expr EQ expr .)
    ,               reduce using rule 114 (expr -> expr EQ expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! SLASH           [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! DASH            [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! LEFTSHIFT       [ reduce using rule 114 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 230 ]
  ! NE              [ shift and go to state 223 ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 283

    (76) statement -> expr ASSIGN expr . SEMI
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 314
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 284

    (117) expr -> expr OR expr .
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    AND             reduce using rule 117 (expr -> expr OR expr .)
    OR              reduce using rule 117 (expr -> expr OR expr .)
    SEMI            reduce using rule 117 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 117 (expr -> expr OR expr .)
    )               reduce using rule 117 (expr -> expr OR expr .)
    ]               reduce using rule 117 (expr -> expr OR expr .)
    ,               reduce using rule 117 (expr -> expr OR expr .)
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218

  ! STAR            [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! SLASH           [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! DASH            [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! RIGHTSHIFT      [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! LEFTSHIFT       [ reduce using rule 117 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 217 ]
  ! OR              [ shift and go to state 232 ]


state 285

    (123) aexpr -> IS_VALID ( var . )

    )               shift and go to state 315


state 286

    (82) statement -> CHECK_STOP_SLOTS ( var . , STRING , STRING ) SEMI

    ,               shift and go to state 316


state 287

    (31) type_enum -> ident pairs SEMI .

    IDENT           reduce using rule 31 (type_enum -> ident pairs SEMI .)
    }               reduce using rule 31 (type_enum -> ident pairs SEMI .)


state 288

    (8) decl -> MACHINE ( ident pairs ) : params { decls . }

    }               shift and go to state 317


state 289

    (129) enumeration -> ident . : ident

    :               shift and go to state 215


state 290

    (34) type_state -> ident , enumeration . pairs SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 318
    empty                          shift and go to state 49

state 291

    (10) decl -> IN_PORT ( ident , type , var pairs ) . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    {               shift and go to state 111

    statements                     shift and go to state 319

state 292

    (27) type_member -> type_or_void ident pairs SEMI .

    VOID            reduce using rule 27 (type_member -> type_or_void ident pairs SEMI .)
    IDENT           reduce using rule 27 (type_member -> type_or_void ident pairs SEMI .)
    }               reduce using rule 27 (type_member -> type_or_void ident pairs SEMI .)


state 293

    (37) types -> empty .

    )               reduce using rule 37 (types -> empty .)


state 294

    (35) types -> type . , types
    (36) types -> type .

    ,               shift and go to state 320
    )               reduce using rule 36 (types -> type .)


state 295

    (26) type_member -> type_or_void ident ( types . ) pairs SEMI

    )               shift and go to state 321


state 296

    (28) type_member -> type_or_void ident ASSIGN expr . SEMI
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    SEMI            shift and go to state 322
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 297

    (12) decl -> TRANS ( idents , idents , ident pairs ) idents .

    PROTOCOL        reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    INCLUDE         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    MACHINE         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    ACTION          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    IN_PORT         reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    OUT_PORT        reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    TRANS           reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    EXTERN_TYPE     reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    GLOBAL          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    STRUCT          reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    ENUM            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    STATE_DECL      reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    VOID            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    IDENT           reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    $end            reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)
    }               reduce using rule 12 (decl -> TRANS ( idents , idents , ident pairs ) idents .)


state 298

    (11) decl -> OUT_PORT ( ident , type , var pairs ) SEMI .

    PROTOCOL        reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    INCLUDE         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    MACHINE         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ACTION          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IN_PORT         reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    OUT_PORT        reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    TRANS           reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    EXTERN_TYPE     reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    GLOBAL          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STRUCT          reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    ENUM            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    STATE_DECL      reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    VOID            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    IDENT           reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    $end            reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)
    }               reduce using rule 11 (decl -> OUT_PORT ( ident , type , var pairs ) SEMI .)


state 299

    (79) statement -> PEEK ( var , . type pairs ) statements
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    typestr                        shift and go to state 17
    type                           shift and go to state 323

state 300

    (99) aexpr -> CHIP [ expr ] . DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] . DOT var [ expr ] DOT var DOT field

    DOT             shift and go to state 324


state 301

    (72) exprs -> expr , . exprs
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    ]               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 325
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 302

    (103) aexpr -> aexpr [ exprs ] .

    DOT             reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    [               reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    )               reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    STAR            reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    SLASH           reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    PLUS            reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    DASH            reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    LT              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    GT              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    LE              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    GE              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    EQ              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    NE              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    AND             reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    OR              reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    RIGHTSHIFT      reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    LEFTSHIFT       reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    SEMI            reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    ,               reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    ]               reduce using rule 103 (aexpr -> aexpr [ exprs ] .)
    ASSIGN          reduce using rule 103 (aexpr -> aexpr [ exprs ] .)


state 303

    (102) aexpr -> aexpr DOT ident ( . exprs )
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 326
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 304

    (83) aexpr -> STATIC_CAST ( type , . expr )
    (84) aexpr -> STATIC_CAST ( type , . STRING , expr )
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    STRING          shift and go to state 327
    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 328
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 305

    (81) statement -> CHECK_ALLOCATE ( var ) . SEMI

    SEMI            shift and go to state 329


state 306

    (124) aexpr -> IS_INVALID ( var ) .

    DOT             reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    [               reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    )               reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    STAR            reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    SLASH           reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    PLUS            reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    DASH            reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    LT              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    GT              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    LE              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    GE              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    EQ              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    NE              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    AND             reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    OR              reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    RIGHTSHIFT      reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    LEFTSHIFT       reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    SEMI            reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    ,               reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    ]               reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)
    ASSIGN          reduce using rule 124 (aexpr -> IS_INVALID ( var ) .)


state 307

    (77) statement -> ENQUEUE ( var , . type pairs ) statements
    (40) type -> . typestr
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    ident                          shift and go to state 19
    typestr                        shift and go to state 17
    type                           shift and go to state 330

state 308

    (80) statement -> COPY_HEAD ( var , . var pairs ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 331
    ident                          shift and go to state 135

state 309

    (104) aexpr -> type DOUBLE_COLON ident ( . exprs )
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 332
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 310

    (78) statement -> STALL_AND_WAIT ( var , . var ) SEMI
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 333
    ident                          shift and go to state 135

state 311

    (87) if_statement -> IF ( expr ) . statements
    (88) if_statement -> IF ( expr ) . statements ELSE statements
    (89) if_statement -> IF ( expr ) . statements ELSE if_statement
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    {               shift and go to state 111

    statements                     shift and go to state 334

state 312

    (94) aexpr -> ident ( exprs ) .

    DOT             reduce using rule 94 (aexpr -> ident ( exprs ) .)
    [               reduce using rule 94 (aexpr -> ident ( exprs ) .)
    )               reduce using rule 94 (aexpr -> ident ( exprs ) .)
    STAR            reduce using rule 94 (aexpr -> ident ( exprs ) .)
    SLASH           reduce using rule 94 (aexpr -> ident ( exprs ) .)
    PLUS            reduce using rule 94 (aexpr -> ident ( exprs ) .)
    DASH            reduce using rule 94 (aexpr -> ident ( exprs ) .)
    LT              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    GT              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    LE              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    GE              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    EQ              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    NE              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    AND             reduce using rule 94 (aexpr -> ident ( exprs ) .)
    OR              reduce using rule 94 (aexpr -> ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 94 (aexpr -> ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 94 (aexpr -> ident ( exprs ) .)
    SEMI            reduce using rule 94 (aexpr -> ident ( exprs ) .)
    ,               reduce using rule 94 (aexpr -> ident ( exprs ) .)
    ]               reduce using rule 94 (aexpr -> ident ( exprs ) .)
    ASSIGN          reduce using rule 94 (aexpr -> ident ( exprs ) .)


state 313

    (97) aexpr -> THIS DOT var [ . expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> THIS DOT var [ . expr ] DOT var DOT field
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 335
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 314

    (76) statement -> expr ASSIGN expr SEMI .

    ENQUEUE         reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    STALL_AND_WAIT  reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    PEEK            reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    COPY_HEAD       reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    CHECK_ALLOCATE  reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    CHECK_STOP_SLOTS reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    RETURN          reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    NOT             reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    DASH            reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    IF              reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    STATIC_CAST     reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    NEW             reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    OOD             reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    THIS            reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    CHIP            reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    (               reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    IS_VALID        reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    IS_INVALID      reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    STRING          reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    NUMBER          reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    FLOATNUMBER     reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    LIT_BOOL        reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    IDENT           reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)
    }               reduce using rule 76 (statement -> expr ASSIGN expr SEMI .)


state 315

    (123) aexpr -> IS_VALID ( var ) .

    DOT             reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    [               reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    )               reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    STAR            reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    SLASH           reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    PLUS            reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    DASH            reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    LT              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    GT              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    LE              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    GE              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    EQ              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    NE              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    AND             reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    OR              reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    RIGHTSHIFT      reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    LEFTSHIFT       reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    SEMI            reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    ,               reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    ]               reduce using rule 123 (aexpr -> IS_VALID ( var ) .)
    ASSIGN          reduce using rule 123 (aexpr -> IS_VALID ( var ) .)


state 316

    (82) statement -> CHECK_STOP_SLOTS ( var , . STRING , STRING ) SEMI

    STRING          shift and go to state 336


state 317

    (8) decl -> MACHINE ( ident pairs ) : params { decls } .

    PROTOCOL        reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    INCLUDE         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    MACHINE         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    ACTION          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    IN_PORT         reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    OUT_PORT        reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    TRANS           reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    EXTERN_TYPE     reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    GLOBAL          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    STRUCT          reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    ENUM            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    STATE_DECL      reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    VOID            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    IDENT           reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    $end            reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)
    }               reduce using rule 8 (decl -> MACHINE ( ident pairs ) : params { decls } .)


state 318

    (34) type_state -> ident , enumeration pairs . SEMI

    SEMI            shift and go to state 337


state 319

    (10) decl -> IN_PORT ( ident , type , var pairs ) statements .

    PROTOCOL        reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    INCLUDE         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    MACHINE         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ACTION          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IN_PORT         reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    OUT_PORT        reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    TRANS           reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    EXTERN_TYPE     reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    GLOBAL          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STRUCT          reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    ENUM            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    STATE_DECL      reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    VOID            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    IDENT           reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    $end            reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)
    }               reduce using rule 10 (decl -> IN_PORT ( ident , type , var pairs ) statements .)


state 320

    (35) types -> type , . types
    (35) types -> . type , types
    (36) types -> . type
    (37) types -> . empty
    (40) type -> . typestr
    (2) empty -> .
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident
    (59) ident -> . IDENT

    )               reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 4

    typestr                        shift and go to state 17
    ident                          shift and go to state 19
    type                           shift and go to state 294
    empty                          shift and go to state 293
    types                          shift and go to state 338

state 321

    (26) type_member -> type_or_void ident ( types ) . pairs SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    SEMI            reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 339
    empty                          shift and go to state 49

state 322

    (28) type_member -> type_or_void ident ASSIGN expr SEMI .

    VOID            reduce using rule 28 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    IDENT           reduce using rule 28 (type_member -> type_or_void ident ASSIGN expr SEMI .)
    }               reduce using rule 28 (type_member -> type_or_void ident ASSIGN expr SEMI .)


state 323

    (79) statement -> PEEK ( var , type . pairs ) statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 340
    empty                          shift and go to state 49

state 324

    (99) aexpr -> CHIP [ expr ] DOT . var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT . var [ expr ] DOT var DOT field
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 341
    ident                          shift and go to state 135

state 325

    (72) exprs -> expr , exprs .

    )               reduce using rule 72 (exprs -> expr , exprs .)
    ]               reduce using rule 72 (exprs -> expr , exprs .)


state 326

    (102) aexpr -> aexpr DOT ident ( exprs . )

    )               shift and go to state 342


state 327

    (84) aexpr -> STATIC_CAST ( type , STRING . , expr )
    (125) literal -> STRING .

    ,               shift and go to state 343
    DOT             reduce using rule 125 (literal -> STRING .)
    [               reduce using rule 125 (literal -> STRING .)
    )               reduce using rule 125 (literal -> STRING .)
    STAR            reduce using rule 125 (literal -> STRING .)
    SLASH           reduce using rule 125 (literal -> STRING .)
    PLUS            reduce using rule 125 (literal -> STRING .)
    DASH            reduce using rule 125 (literal -> STRING .)
    LT              reduce using rule 125 (literal -> STRING .)
    GT              reduce using rule 125 (literal -> STRING .)
    LE              reduce using rule 125 (literal -> STRING .)
    GE              reduce using rule 125 (literal -> STRING .)
    EQ              reduce using rule 125 (literal -> STRING .)
    NE              reduce using rule 125 (literal -> STRING .)
    AND             reduce using rule 125 (literal -> STRING .)
    OR              reduce using rule 125 (literal -> STRING .)
    RIGHTSHIFT      reduce using rule 125 (literal -> STRING .)
    LEFTSHIFT       reduce using rule 125 (literal -> STRING .)


state 328

    (83) aexpr -> STATIC_CAST ( type , expr . )
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 344
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 329

    (81) statement -> CHECK_ALLOCATE ( var ) SEMI .

    ENQUEUE         reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    PEEK            reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    COPY_HEAD       reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    RETURN          reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NOT             reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    DASH            reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IF              reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STATIC_CAST     reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NEW             reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    OOD             reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    THIS            reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    CHIP            reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    (               reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_VALID        reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IS_INVALID      reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    STRING          reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    NUMBER          reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    FLOATNUMBER     reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    LIT_BOOL        reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    IDENT           reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)
    }               reduce using rule 81 (statement -> CHECK_ALLOCATE ( var ) SEMI .)


state 330

    (77) statement -> ENQUEUE ( var , type . pairs ) statements
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 345
    empty                          shift and go to state 49

state 331

    (80) statement -> COPY_HEAD ( var , var . pairs ) SEMI
    (60) pairs -> . , pairsx
    (61) pairs -> . empty
    (2) empty -> .

    ,               shift and go to state 48
    )               reduce using rule 2 (empty -> .)

    pairs                          shift and go to state 346
    empty                          shift and go to state 49

state 332

    (104) aexpr -> type DOUBLE_COLON ident ( exprs . )

    )               shift and go to state 347


state 333

    (78) statement -> STALL_AND_WAIT ( var , var . ) SEMI

    )               shift and go to state 348


state 334

    (87) if_statement -> IF ( expr ) statements .
    (88) if_statement -> IF ( expr ) statements . ELSE statements
    (89) if_statement -> IF ( expr ) statements . ELSE if_statement

    ENQUEUE         reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    STALL_AND_WAIT  reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    PEEK            reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    COPY_HEAD       reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    CHECK_ALLOCATE  reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    CHECK_STOP_SLOTS reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    RETURN          reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    NOT             reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    DASH            reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    IF              reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    STATIC_CAST     reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    NEW             reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    OOD             reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    THIS            reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    CHIP            reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    (               reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    IS_VALID        reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    IS_INVALID      reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    STRING          reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    NUMBER          reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    FLOATNUMBER     reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    LIT_BOOL        reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    IDENT           reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    }               reduce using rule 87 (if_statement -> IF ( expr ) statements .)
    ELSE            shift and go to state 349


state 335

    (97) aexpr -> THIS DOT var [ expr . ] DOT var DOT ident ( exprs )
    (98) aexpr -> THIS DOT var [ expr . ] DOT var DOT field
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    ]               shift and go to state 350
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 336

    (82) statement -> CHECK_STOP_SLOTS ( var , STRING . , STRING ) SEMI

    ,               shift and go to state 351


state 337

    (34) type_state -> ident , enumeration pairs SEMI .

    IDENT           reduce using rule 34 (type_state -> ident , enumeration pairs SEMI .)
    }               reduce using rule 34 (type_state -> ident , enumeration pairs SEMI .)


state 338

    (35) types -> type , types .

    )               reduce using rule 35 (types -> type , types .)


state 339

    (26) type_member -> type_or_void ident ( types ) pairs . SEMI

    SEMI            shift and go to state 352


state 340

    (79) statement -> PEEK ( var , type pairs . ) statements

    )               shift and go to state 353


state 341

    (99) aexpr -> CHIP [ expr ] DOT var . [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var . [ expr ] DOT var DOT field

    [               shift and go to state 354


state 342

    (102) aexpr -> aexpr DOT ident ( exprs ) .

    DOT             reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    [               reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    )               reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    STAR            reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    SLASH           reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    PLUS            reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    DASH            reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    LT              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    GT              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    LE              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    GE              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    EQ              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    NE              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    AND             reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    OR              reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    SEMI            reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    ,               reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    ]               reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 102 (aexpr -> aexpr DOT ident ( exprs ) .)


state 343

    (84) aexpr -> STATIC_CAST ( type , STRING , . expr )
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 355
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 344

    (83) aexpr -> STATIC_CAST ( type , expr ) .

    DOT             reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    [               reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    )               reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    STAR            reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    SLASH           reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    PLUS            reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    DASH            reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    LT              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    GT              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    LE              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    GE              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    EQ              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    NE              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    AND             reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    OR              reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    RIGHTSHIFT      reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    LEFTSHIFT       reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    SEMI            reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    ,               reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    ]               reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)
    ASSIGN          reduce using rule 83 (aexpr -> STATIC_CAST ( type , expr ) .)


state 345

    (77) statement -> ENQUEUE ( var , type pairs . ) statements

    )               shift and go to state 356


state 346

    (80) statement -> COPY_HEAD ( var , var pairs . ) SEMI

    )               shift and go to state 357


state 347

    (104) aexpr -> type DOUBLE_COLON ident ( exprs ) .

    DOT             reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    [               reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    )               reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    STAR            reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SLASH           reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    PLUS            reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    DASH            reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LT              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GT              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LE              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    GE              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    EQ              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    NE              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    AND             reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    OR              reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    SEMI            reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ,               reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ]               reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)
    ASSIGN          reduce using rule 104 (aexpr -> type DOUBLE_COLON ident ( exprs ) .)


state 348

    (78) statement -> STALL_AND_WAIT ( var , var ) . SEMI

    SEMI            shift and go to state 358


state 349

    (88) if_statement -> IF ( expr ) statements ELSE . statements
    (89) if_statement -> IF ( expr ) statements ELSE . if_statement
    (68) statements -> . { statements_inner }
    (69) statements -> . { }
    (87) if_statement -> . IF ( expr ) statements
    (88) if_statement -> . IF ( expr ) statements ELSE statements
    (89) if_statement -> . IF ( expr ) statements ELSE if_statement

    {               shift and go to state 111
    IF              shift and go to state 160

    if_statement                   shift and go to state 360
    statements                     shift and go to state 359

state 350

    (97) aexpr -> THIS DOT var [ expr ] . DOT var DOT ident ( exprs )
    (98) aexpr -> THIS DOT var [ expr ] . DOT var DOT field

    DOT             shift and go to state 361


state 351

    (82) statement -> CHECK_STOP_SLOTS ( var , STRING , . STRING ) SEMI

    STRING          shift and go to state 362


state 352

    (26) type_member -> type_or_void ident ( types ) pairs SEMI .

    VOID            reduce using rule 26 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    IDENT           reduce using rule 26 (type_member -> type_or_void ident ( types ) pairs SEMI .)
    }               reduce using rule 26 (type_member -> type_or_void ident ( types ) pairs SEMI .)


state 353

    (79) statement -> PEEK ( var , type pairs ) . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    {               shift and go to state 111

    statements                     shift and go to state 363

state 354

    (99) aexpr -> CHIP [ expr ] DOT var [ . expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ . expr ] DOT var DOT field
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 364
    enumeration                    shift and go to state 149
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144

state 355

    (84) aexpr -> STATIC_CAST ( type , STRING , expr . )
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    )               shift and go to state 365
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 356

    (77) statement -> ENQUEUE ( var , type pairs ) . statements
    (68) statements -> . { statements_inner }
    (69) statements -> . { }

    {               shift and go to state 111

    statements                     shift and go to state 366

state 357

    (80) statement -> COPY_HEAD ( var , var pairs ) . SEMI

    SEMI            shift and go to state 367


state 358

    (78) statement -> STALL_AND_WAIT ( var , var ) SEMI .

    ENQUEUE         reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STALL_AND_WAIT  reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    PEEK            reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    COPY_HEAD       reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    RETURN          reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NOT             reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    DASH            reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IF              reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STATIC_CAST     reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NEW             reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    OOD             reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    THIS            reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    CHIP            reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    (               reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_VALID        reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IS_INVALID      reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    STRING          reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    NUMBER          reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    FLOATNUMBER     reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    LIT_BOOL        reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    IDENT           reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)
    }               reduce using rule 78 (statement -> STALL_AND_WAIT ( var , var ) SEMI .)


state 359

    (88) if_statement -> IF ( expr ) statements ELSE statements .

    ENQUEUE         reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    STALL_AND_WAIT  reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    PEEK            reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    COPY_HEAD       reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_ALLOCATE  reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHECK_STOP_SLOTS reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    RETURN          reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    NOT             reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    DASH            reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    IF              reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    STATIC_CAST     reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    NEW             reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    OOD             reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    THIS            reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    CHIP            reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    (               reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_VALID        reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    IS_INVALID      reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    STRING          reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    NUMBER          reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    FLOATNUMBER     reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    LIT_BOOL        reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    IDENT           reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)
    }               reduce using rule 88 (if_statement -> IF ( expr ) statements ELSE statements .)


state 360

    (89) if_statement -> IF ( expr ) statements ELSE if_statement .

    ENQUEUE         reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STALL_AND_WAIT  reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    PEEK            reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    COPY_HEAD       reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_ALLOCATE  reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHECK_STOP_SLOTS reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    RETURN          reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NOT             reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    DASH            reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IF              reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STATIC_CAST     reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NEW             reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    OOD             reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    THIS            reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    CHIP            reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    (               reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_VALID        reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IS_INVALID      reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    STRING          reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    NUMBER          reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    FLOATNUMBER     reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    LIT_BOOL        reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    IDENT           reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)
    }               reduce using rule 89 (if_statement -> IF ( expr ) statements ELSE if_statement .)


state 361

    (97) aexpr -> THIS DOT var [ expr ] DOT . var DOT ident ( exprs )
    (98) aexpr -> THIS DOT var [ expr ] DOT . var DOT field
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 368
    ident                          shift and go to state 135

state 362

    (82) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING . ) SEMI

    )               shift and go to state 369


state 363

    (79) statement -> PEEK ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    PEEK            reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    COPY_HEAD       reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    RETURN          reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    NOT             reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    DASH            reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    IF              reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    NEW             reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    OOD             reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    THIS            reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    CHIP            reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    (               reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    STRING          reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    NUMBER          reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    IDENT           reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)
    }               reduce using rule 79 (statement -> PEEK ( var , type pairs ) statements .)


state 364

    (99) aexpr -> CHIP [ expr ] DOT var [ expr . ] DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ expr . ] DOT var DOT field
    (106) expr -> expr . STAR expr
    (107) expr -> expr . SLASH expr
    (108) expr -> expr . PLUS expr
    (109) expr -> expr . DASH expr
    (110) expr -> expr . LT expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LE expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . EQ expr
    (115) expr -> expr . NE expr
    (116) expr -> expr . AND expr
    (117) expr -> expr . OR expr
    (118) expr -> expr . RIGHTSHIFT expr
    (119) expr -> expr . LEFTSHIFT expr

    ]               shift and go to state 370
    STAR            shift and go to state 220
    SLASH           shift and go to state 228
    PLUS            shift and go to state 227
    DASH            shift and go to state 224
    LT              shift and go to state 225
    GT              shift and go to state 219
    LE              shift and go to state 226
    GE              shift and go to state 222
    EQ              shift and go to state 230
    NE              shift and go to state 223
    AND             shift and go to state 217
    OR              shift and go to state 232
    RIGHTSHIFT      shift and go to state 229
    LEFTSHIFT       shift and go to state 218


state 365

    (84) aexpr -> STATIC_CAST ( type , STRING , expr ) .

    DOT             reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    [               reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    )               reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    STAR            reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SLASH           reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    PLUS            reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    DASH            reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LT              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GT              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LE              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    GE              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    EQ              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    NE              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    AND             reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    OR              reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    RIGHTSHIFT      reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    LEFTSHIFT       reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    SEMI            reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ,               reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ]               reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)
    ASSIGN          reduce using rule 84 (aexpr -> STATIC_CAST ( type , STRING , expr ) .)


state 366

    (77) statement -> ENQUEUE ( var , type pairs ) statements .

    ENQUEUE         reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STALL_AND_WAIT  reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    PEEK            reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    COPY_HEAD       reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    CHECK_ALLOCATE  reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    CHECK_STOP_SLOTS reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    RETURN          reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NOT             reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    DASH            reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IF              reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STATIC_CAST     reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NEW             reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    OOD             reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    THIS            reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    CHIP            reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    (               reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IS_VALID        reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IS_INVALID      reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    STRING          reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    NUMBER          reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    FLOATNUMBER     reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    LIT_BOOL        reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    IDENT           reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)
    }               reduce using rule 77 (statement -> ENQUEUE ( var , type pairs ) statements .)


state 367

    (80) statement -> COPY_HEAD ( var , var pairs ) SEMI .

    ENQUEUE         reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STALL_AND_WAIT  reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    PEEK            reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    COPY_HEAD       reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    RETURN          reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NOT             reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    DASH            reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IF              reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STATIC_CAST     reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NEW             reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    OOD             reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    THIS            reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    CHIP            reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    (               reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IS_VALID        reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IS_INVALID      reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    STRING          reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    NUMBER          reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    FLOATNUMBER     reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    LIT_BOOL        reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    IDENT           reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)
    }               reduce using rule 80 (statement -> COPY_HEAD ( var , var pairs ) SEMI .)


state 368

    (97) aexpr -> THIS DOT var [ expr ] DOT var . DOT ident ( exprs )
    (98) aexpr -> THIS DOT var [ expr ] DOT var . DOT field

    DOT             shift and go to state 371


state 369

    (82) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) . SEMI

    SEMI            shift and go to state 372


state 370

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] . DOT var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ expr ] . DOT var DOT field

    DOT             shift and go to state 373


state 371

    (97) aexpr -> THIS DOT var [ expr ] DOT var DOT . ident ( exprs )
    (98) aexpr -> THIS DOT var [ expr ] DOT var DOT . field
    (59) ident -> . IDENT
    (131) field -> . ident

    IDENT           shift and go to state 4

    ident                          shift and go to state 375
    field                          shift and go to state 374

state 372

    (82) statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .

    ENQUEUE         reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STALL_AND_WAIT  reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    PEEK            reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    COPY_HEAD       reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_ALLOCATE  reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHECK_STOP_SLOTS reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    RETURN          reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NOT             reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    DASH            reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IF              reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STATIC_CAST     reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NEW             reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    OOD             reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    THIS            reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    CHIP            reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    (               reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_VALID        reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IS_INVALID      reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    STRING          reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    NUMBER          reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    FLOATNUMBER     reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    LIT_BOOL        reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    IDENT           reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)
    }               reduce using rule 82 (statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI .)


state 373

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT . var DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT . var DOT field
    (130) var -> . ident
    (59) ident -> . IDENT

    IDENT           shift and go to state 4

    var                            shift and go to state 376
    ident                          shift and go to state 135

state 374

    (98) aexpr -> THIS DOT var [ expr ] DOT var DOT field .

    DOT             reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    [               reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    )               reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    STAR            reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    SLASH           reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    PLUS            reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    DASH            reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    LT              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    GT              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    LE              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    GE              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    EQ              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    NE              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    AND             reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    OR              reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    RIGHTSHIFT      reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    LEFTSHIFT       reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    SEMI            reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    ,               reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    ]               reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)
    ASSIGN          reduce using rule 98 (aexpr -> THIS DOT var [ expr ] DOT var DOT field .)


state 375

    (97) aexpr -> THIS DOT var [ expr ] DOT var DOT ident . ( exprs )
    (131) field -> ident .

    (               shift and go to state 377
    DOT             reduce using rule 131 (field -> ident .)
    [               reduce using rule 131 (field -> ident .)
    SEMI            reduce using rule 131 (field -> ident .)
    ASSIGN          reduce using rule 131 (field -> ident .)
    STAR            reduce using rule 131 (field -> ident .)
    SLASH           reduce using rule 131 (field -> ident .)
    PLUS            reduce using rule 131 (field -> ident .)
    DASH            reduce using rule 131 (field -> ident .)
    LT              reduce using rule 131 (field -> ident .)
    GT              reduce using rule 131 (field -> ident .)
    LE              reduce using rule 131 (field -> ident .)
    GE              reduce using rule 131 (field -> ident .)
    EQ              reduce using rule 131 (field -> ident .)
    NE              reduce using rule 131 (field -> ident .)
    AND             reduce using rule 131 (field -> ident .)
    OR              reduce using rule 131 (field -> ident .)
    RIGHTSHIFT      reduce using rule 131 (field -> ident .)
    LEFTSHIFT       reduce using rule 131 (field -> ident .)
    )               reduce using rule 131 (field -> ident .)
    ]               reduce using rule 131 (field -> ident .)
    ,               reduce using rule 131 (field -> ident .)


state 376

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var . DOT ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var . DOT field

    DOT             shift and go to state 378


state 377

    (97) aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( . exprs )
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 379
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 378

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT . ident ( exprs )
    (100) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT . field
    (59) ident -> . IDENT
    (131) field -> . ident

    IDENT           shift and go to state 4

    ident                          shift and go to state 380
    field                          shift and go to state 381

state 379

    (97) aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs . )

    )               shift and go to state 382


state 380

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident . ( exprs )
    (131) field -> ident .

    (               shift and go to state 383
    DOT             reduce using rule 131 (field -> ident .)
    [               reduce using rule 131 (field -> ident .)
    SEMI            reduce using rule 131 (field -> ident .)
    ASSIGN          reduce using rule 131 (field -> ident .)
    STAR            reduce using rule 131 (field -> ident .)
    SLASH           reduce using rule 131 (field -> ident .)
    PLUS            reduce using rule 131 (field -> ident .)
    DASH            reduce using rule 131 (field -> ident .)
    LT              reduce using rule 131 (field -> ident .)
    GT              reduce using rule 131 (field -> ident .)
    LE              reduce using rule 131 (field -> ident .)
    GE              reduce using rule 131 (field -> ident .)
    EQ              reduce using rule 131 (field -> ident .)
    NE              reduce using rule 131 (field -> ident .)
    AND             reduce using rule 131 (field -> ident .)
    OR              reduce using rule 131 (field -> ident .)
    RIGHTSHIFT      reduce using rule 131 (field -> ident .)
    LEFTSHIFT       reduce using rule 131 (field -> ident .)
    )               reduce using rule 131 (field -> ident .)
    ]               reduce using rule 131 (field -> ident .)
    ,               reduce using rule 131 (field -> ident .)


state 381

    (100) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .

    DOT             reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    [               reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    )               reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    STAR            reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    SLASH           reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    PLUS            reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    DASH            reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    LT              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    GT              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    LE              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    GE              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    EQ              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    NE              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    AND             reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    OR              reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    RIGHTSHIFT      reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    LEFTSHIFT       reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    SEMI            reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    ,               reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    ]               reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)
    ASSIGN          reduce using rule 100 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT field .)


state 382

    (97) aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .

    DOT             reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    [               reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    )               reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    STAR            reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    SLASH           reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    PLUS            reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    DASH            reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LT              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    GT              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LE              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    GE              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    EQ              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    NE              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    AND             reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    OR              reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    SEMI            reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ,               reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ]               reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 97 (aexpr -> THIS DOT var [ expr ] DOT var DOT ident ( exprs ) .)


state 383

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( . exprs )
    (72) exprs -> . expr , exprs
    (73) exprs -> . expr
    (74) exprs -> . empty
    (105) expr -> . aexpr
    (106) expr -> . expr STAR expr
    (107) expr -> . expr SLASH expr
    (108) expr -> . expr PLUS expr
    (109) expr -> . expr DASH expr
    (110) expr -> . expr LT expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LE expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr EQ expr
    (115) expr -> . expr NE expr
    (116) expr -> . expr AND expr
    (117) expr -> . expr OR expr
    (118) expr -> . expr RIGHTSHIFT expr
    (119) expr -> . expr LEFTSHIFT expr
    (120) expr -> . NOT expr
    (121) expr -> . DASH expr
    (2) empty -> .
    (83) aexpr -> . STATIC_CAST ( type , expr )
    (84) aexpr -> . STATIC_CAST ( type , STRING , expr )
    (90) aexpr -> . var
    (91) aexpr -> . type ident
    (92) aexpr -> . literal
    (93) aexpr -> . enumeration
    (94) aexpr -> . ident ( exprs )
    (95) aexpr -> . NEW type
    (96) aexpr -> . OOD
    (97) aexpr -> . THIS DOT var [ expr ] DOT var DOT ident ( exprs )
    (98) aexpr -> . THIS DOT var [ expr ] DOT var DOT field
    (99) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs )
    (100) aexpr -> . CHIP [ expr ] DOT var [ expr ] DOT var DOT field
    (101) aexpr -> . aexpr DOT ident
    (102) aexpr -> . aexpr DOT ident ( exprs )
    (103) aexpr -> . aexpr [ exprs ]
    (104) aexpr -> . type DOUBLE_COLON ident ( exprs )
    (122) aexpr -> . ( expr )
    (123) aexpr -> . IS_VALID ( var )
    (124) aexpr -> . IS_INVALID ( var )
    (130) var -> . ident
    (40) type -> . typestr
    (125) literal -> . STRING
    (126) literal -> . NUMBER
    (127) literal -> . FLOATNUMBER
    (128) literal -> . LIT_BOOL
    (129) enumeration -> . ident : ident
    (59) ident -> . IDENT
    (38) typestr -> . typestr DOUBLE_COLON ident
    (39) typestr -> . ident

    NOT             shift and go to state 168
    DASH            shift and go to state 159
    )               reduce using rule 2 (empty -> .)
    STATIC_CAST     shift and go to state 145
    NEW             shift and go to state 143
    OOD             shift and go to state 161
    THIS            shift and go to state 163
    CHIP            shift and go to state 140
    (               shift and go to state 147
    IS_VALID        shift and go to state 166
    IS_INVALID      shift and go to state 148
    STRING          shift and go to state 156
    NUMBER          shift and go to state 141
    FLOATNUMBER     shift and go to state 139
    LIT_BOOL        shift and go to state 165
    IDENT           shift and go to state 4

    ident                          shift and go to state 162
    expr                           shift and go to state 255
    enumeration                    shift and go to state 149
    exprs                          shift and go to state 384
    literal                        shift and go to state 158
    var                            shift and go to state 153
    typestr                        shift and go to state 17
    type                           shift and go to state 155
    aexpr                          shift and go to state 144
    empty                          shift and go to state 254

state 384

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs . )

    )               shift and go to state 385


state 385

    (99) aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .

    DOT             reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    [               reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    )               reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    STAR            reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    SLASH           reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    PLUS            reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    DASH            reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LT              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    GT              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LE              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    GE              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    EQ              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    NE              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    AND             reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    OR              reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    RIGHTSHIFT      reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    LEFTSHIFT       reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    SEMI            reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ,               reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ]               reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)
    ASSIGN          reduce using rule 99 (aexpr -> CHIP [ expr ] DOT var [ expr ] DOT var DOT ident ( exprs ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOUBLE_COLON in state 17 resolved as shift
