/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// This file is distributed as part of the Championship Branch Prediction      //
// workshop held in conjunction with ISCA'2014.                                //
// Everyone is granted permission to copy, modify, and/or re-distribute        //
// this software.                                                              //
// Please contact Moinuddin Qureshi <moin@gatech.edu> if you have any questions//
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

// --- DO NOT EDIT THIS FILE --- DO NOT EDIT THIS FILE --- DO NOT EDIT THIS FILE ---
// IMPORTANT NOTE: Changing anything in here will violate the competition rules.



#include "utils.h"
#include "tracer.h"
#include "predictor.h"


// usage: predictor <trace>

int main(int argc, char* argv[]){
  
  if (argc != 2) {
    printf("usage: %s <trace>\n", argv[0]);
    exit(-1);
  }
  
  ///////////////////////////////////////////////
  // Init variables
  ///////////////////////////////////////////////
    
    CBP_TRACER *tracer = new CBP_TRACER(argv[1]);
    CBP_TRACE_RECORD *trace = new CBP_TRACE_RECORD();

    UINT64     numMispred_2bitsat =0;  
    UINT64     numMispred_2level =0;  
    UINT64     numMispred_openend =0;  

    InitPredictor_2bitsat();
    InitPredictor_2level();
    InitPredictor_openend();
    
  ///////////////////////////////////////////////
  // read each trace recod, simulate until done
  ///////////////////////////////////////////////

      while (tracer->GetNextRecord(trace)) {

	if(trace->opType == OPTYPE_BRANCH_COND){
      bool predDir_2bitsat;
      bool predDir_2level;
      bool predDir_openend;

      // 2bitsat
	  predDir_2bitsat = GetPrediction_2bitsat(trace->PC);

      // 2level
	  predDir_2level = GetPrediction_2level(trace->PC);

      // openend
	  predDir_openend = GetPrediction_openend(trace->PC);

      // 2bitsat
	  UpdatePredictor_2bitsat(trace->PC, trace->branchTaken, 
				  predDir_2bitsat, trace->branchTarget);
	  
	  if(predDir_2bitsat != trace->branchTaken){
	    numMispred_2bitsat++; // update mispred stats
	  }
	  
      // 2level
	  UpdatePredictor_2level(trace->PC, trace->branchTaken, 
				  predDir_2level, trace->branchTarget);
	  
	  if(predDir_2level != trace->branchTaken){
	    numMispred_2level++; // update mispred stats
	  }
	  
      // openend
	  UpdatePredictor_openend(trace->PC, trace->branchTaken, 
				  predDir_openend, trace->branchTarget);
	  
	  if(predDir_openend != trace->branchTaken){
	    numMispred_openend++; // update mispred stats
	  }
	  
	}
      
      }

    ///////////////////////////////////////////
    //print_stats
    ///////////////////////////////////////////

      printf("\n");
      printf("\nNUM_INSTRUCTIONS     \t : %10llu",   tracer->GetNumInst());
      printf("\nNUM_CONDITIONAL_BR   \t : %10llu",   tracer->GetNumCondBranch());
      printf("\n");
      printf("\n2bitsat: NUM_MISPREDICTIONS   \t : %10llu",   numMispred_2bitsat);
      printf("\n2bitsat: MISPRED_PER_1K_INST  \t : %10.3f",   1000.0*(double)(numMispred_2bitsat)/(double)(tracer->GetNumInst()));
      printf("\n2level:  NUM_MISPREDICTIONS   \t : %10llu",   numMispred_2level);
      printf("\n2level:  MISPRED_PER_1K_INST  \t : %10.3f",   1000.0*(double)(numMispred_2level)/(double)(tracer->GetNumInst()));
      printf("\nopenend: NUM_MISPREDICTIONS   \t : %10llu",   numMispred_openend);
      printf("\nopenend: MISPRED_PER_1K_INST  \t : %10.3f",   1000.0*(double)(numMispred_openend)/(double)(tracer->GetNumInst()));
      printf("\n\n");
}



